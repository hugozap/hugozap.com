<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Hugozap</title>
 <link href="http://hugozap.github.com/atom.xml" rel="self"/>
 <link href="http://hugozap.github.com"/>
 <updated>2018-04-03T21:58:59-05:00</updated>
 <id>http://hugozap.github.com</id>
 <author>
   <name>Hugo Zapata</name>
   <email>hugozap@obassi.com</email>
 </author>

 
 <entry>
   <title>Released react-rotary-knob Skin Pack ( 18 Skins )</title>
   <link href="http://hugozap.github.com/software/2018/03/12/released-reactrotary"/>
   <updated>2018-03-12T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/03/12/released-reactrotary</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/img/react-rotary-knob-skins-preview590x300.jpg&quot; alt=&quot;rotary knob skins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last week I released version 1 of &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob/&quot;&gt;react-rotary-knob&lt;/a&gt;. One of the cool things of the component is the support for custom skins. Yesterday I released a Skin pack with 18 cool skins. The skins are JS modules that can be easily imported and customized (just set the &lt;code class=&quot;highlighter-rouge&quot;&gt;skin&lt;/code&gt; attribute of the Knob to the imported module).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codecanyon.net/item/react-rotary-knob-skin-pack/21567405&quot;&gt;You can get the skin set with setup instructions here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Randomize SVG definition id's</title>
   <link href="http://hugozap.github.com/software/2018/03/07/randomize-svg-defini"/>
   <updated>2018-03-07T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/03/07/randomize-svg-defini</id>
   <content type="html">
&lt;p&gt;When using inline SVG’s a duplicated definition element id’s will cause problems as the browser will use the first SVG definition with the id.&lt;/p&gt;

&lt;p&gt;I created a tool to randomize id’s, you can find it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.com/randomize_svg_def_ids.html&quot;&gt;http://hugozap.com/randomize_svg_def_ids.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If for some reason the link is broken, &lt;a href=&quot;https://gist.github.com/hugozap/a0b96b14d25bad83cbe73b0d21d182d9&quot;&gt;here’s the gist&lt;/a&gt; (it’s a single html file)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>A rotary knob for React</title>
   <link href="http://hugozap.github.com/software/2018/03/03/a-rotary-knob-for-re"/>
   <updated>2018-03-03T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/03/03/a-rotary-knob-for-re</id>
   <content type="html">
&lt;p&gt;A few days ago, I published &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob&quot;&gt;react-rotary-knob&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/knobdemo.png&quot; alt=&quot;knob&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though is a component with a simple API, there were multiple challenging aspects of building it, some of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the knob is small, how to handle the touch interactions? ( it has to feel natural).&lt;/li&gt;
  &lt;li&gt;Be precise.&lt;/li&gt;
  &lt;li&gt;Support for mobile.&lt;/li&gt;
  &lt;li&gt;Support for keyboard events.&lt;/li&gt;
  &lt;li&gt;Play well with other form components (focus).&lt;/li&gt;
  &lt;li&gt;Support custom skins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;custom-skins&quot;&gt;Custom skins&lt;/h3&gt;

&lt;p&gt;The Knob can be skinned using SVG (see the default skin). As long as the SVG file has an element with id “knob” and its centered it will work. For a reference check the &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob/blob/master/src/knobdefaultskin.js&quot;&gt;default skin&lt;/a&gt;. I’m currently working on a custom skin pack.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/hugozap/react-samy-svg&quot;&gt;react-samy-svg&lt;/a&gt; is possible to build components based on SVG files without hardcoding the SVG.&lt;/p&gt;

&lt;h3 id=&quot;precision-mode&quot;&gt;Precision mode&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/79100d18d391d22dd35c7ac7f956cc93cab72eee/687474703a2f2f6875676f7a61702e6769746875622e696f2f72656163742d726f746172792d6b6e6f622f696d672f6b6e6f622d6261736963322e676966&quot; alt=&quot;Precision mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By adding a minimum lock distance we avoid the sudden ‘jumps’ when dragging the Knob, this works well with the non limited dragging. If more precision is needed then a larger drag distance can be used.&lt;/p&gt;

&lt;h3 id=&quot;demos&quot;&gt;Demos&lt;/h3&gt;

&lt;p&gt;Try it yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://audio-thing2.surge.sh/&quot;&gt;Controlling Oscillator parameters (WebAudio)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hugozap.github.io/react-rotary-knob/storybook&quot;&gt;Component storybook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Voronoi Butterfly</title>
   <link href="http://hugozap.github.com/software/2018/01/09/voronoi-butterfly"/>
   <updated>2018-01-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/01/09/voronoi-butterfly</id>
   <content type="html">
&lt;iframe style=&quot;border:solid 1px rgb(30,30,30)&quot; src=&quot;/demos/voronoi_butterfly.html&quot; width=&quot;100%&quot; height=&quot;500px&quot;&gt;...&lt;/iframe&gt;

&lt;p&gt;Voronoi diagrams are used in a broad range of applications. d3.js provides the d3.voronoi utility to generate the list of polygons based on a list of points on a plane.&lt;/p&gt;

&lt;p&gt;Another popular use of voronoi diagrams is graphics and art.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bl.ocks.org/hugozap/a9a603d79070209411d9bbf7e616e7d0&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on &lt;a href=&quot;https://bl.ocks.org/mbostock/4060366&quot;&gt;this demo&lt;/a&gt; by d3 creator,  Mike Bostock.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slides of my talk SVG and React ( ReactJS Tokyo December 2017 )</title>
   <link href="http://hugozap.github.com/software/2018/01/03/slides-of-my-talk-sv"/>
   <updated>2018-01-03T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/01/03/slides-of-my-talk-sv</id>
   <content type="html">
&lt;p&gt;A few weeks ago I gave a talk in the ReactJS Tokyo meetup. When I arrived to Japan a few months ago one of my goals was to contribute in some way to the local JavaScript community, so I searched for conferences and meetups and found ReactJS Tokyo. After contacting the organizers and meeting with one of them, things were arranged and I was one of the speakers.&lt;/p&gt;

&lt;p&gt;The topic I chose was SVG and React. There’s different approaches to loading and manipulating SVG within React, so my goal was to present a series of tools and techniques to use depending on the use case. I’ve been working a lot with SVG and React and to solve some of the challenges presented, I maintain a tool called react-samy-svg that makes it easy to load and manipulate external SVG files. &lt;a href=&quot;https://github.com/hugozap/react-samy-svg&quot;&gt;Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the presentations ended, I had the opportunity to meet some cool people. The feedback I received was positive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://slides.com/hugozapata/deck&quot;&gt;Check the slides here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Simulations are fun!</title>
   <link href="http://hugozap.github.com/software/2018/01/03/simulations-are-fun"/>
   <updated>2018-01-03T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2018/01/03/simulations-are-fun</id>
   <content type="html">
&lt;p&gt;Inspired by Tokyo, I’ve been experimenting with different techniques to simulate a city and its people. There’s been a lot of challenges and it has 
been a great excercise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tokyosim000001.surge.sh/&quot;&gt;View v000000.1 - B&amp;amp;W &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tokyosim-v00000002.surge.sh/&quot;&gt;View v000000.2 - Some colors, people using portals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-a-type-system-for-javascript&quot;&gt;Using a type system for JavaScript&lt;/h2&gt;

&lt;p&gt;For the first prototype version I used plain JavaScript. I reached a point where not having types was causing some pain. Especially as each world entity has properties that I had to remember. Different entities shared some properties. For example Person and Floor have both positions (x,y) , Floor and Train have both an array of Persons.&lt;/p&gt;

&lt;p&gt;As things were getting more complex adding a type system was needed. I didn’t want to spend a lot of time on setup so I went with Flow. After a few hours refactoring the code, the cognitive load was lower again and I could keep focusing on the next challenge.&lt;/p&gt;

&lt;h2 id=&quot;svg-vs-canvas-vs-webgl-renderer&quot;&gt;SVG vs canvas vs webgl renderer&lt;/h2&gt;

&lt;p&gt;I started using SVG and d3.js, this combination is usually used to create charts. I modeled the city as a list of data entites and d3 has a lot of utilities to make it easier to create visualizations with it. The problem with SVG for this use cases is that one has to store the SVG internal nodes to update only those (re creating the SVG would be very expensive). First prototype version woks ok , but I knew that it was time to switch to a more clean approach. Currently I’m working on the canvas renderer (using p5.js)&lt;/p&gt;

&lt;h2 id=&quot;portals&quot;&gt;Portals&lt;/h2&gt;

&lt;p&gt;One of the interesting challenges I had to solve was moving one person from one place to another. I have a list of Places and when the entity gets closer to a certain point, it needs to be transfered to other place ( For example, from one building floor to another, or from the building 1st floor to the street)&lt;/p&gt;

&lt;p&gt;The solution to this, was to introduce the concept of “Portals”. Each portal connects 2 places at specific points (x, y). I created an interface IPortal with all the portal properties. So far I have 2 types of portals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Escalators (from floor to floor )&lt;/li&gt;
  &lt;li&gt;Building entrance ( from floor to street )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;end-goal&quot;&gt;End goal&lt;/h2&gt;

&lt;p&gt;I’m working on the rule engine and new renderer now. It started as a personal excercise but I see how it can be used to create some fun 2d things with it.
Watching the world entities go from one place to another is fun and designing/debugging has been a great brain workout so I plan to keep adding some features and release derivative products, maybe just small demos/games.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Rethinking Accessibility</title>
   <link href="http://hugozap.github.com/software/2017/08/10/rethinking-accessibi"/>
   <updated>2017-08-10T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/08/10/rethinking-accessibi</id>
   <content type="html">
&lt;p&gt;[Work in Progress]&lt;/p&gt;

&lt;p&gt;Most of the accessibility resources out there focus on just one type of accessibility. That is, making a Web site easier to use to people with vision problems. From using contrasting colors, to adding special attributes for screen readers. The site structure is the same, but the goal is to make it less hard to use.&lt;/p&gt;

&lt;p&gt;This is a very limited view of what the Web could be in terms of accessibility.&lt;/p&gt;

&lt;h2 id=&quot;issues-with-current-web-accessibility-guidelines-and-checklists&quot;&gt;Issues with current Web accessibility guidelines and checklists.&lt;/h2&gt;

&lt;p&gt;Because the current accessibility principles are somewhat standard, there are lists that can be used to check against this principles. However, a developer can follow the guidelines and still create a Website that users cannot use. Its better than nothing but still far from ideal.&lt;/p&gt;

&lt;p&gt;I’ve been working on programming workshops for deaf students. A big challenge for them is the text oriented nature of most programming resources, and the lack of videos with sign languange interpretation. I was not aware that for most of them, written language is not natural, and they usually get confused with long paragraphs. Having subtitles for videos is also problematic, because again, that’s not how they communicate and its common for them to get lost.  ( Visual, concise explanations work well here )&lt;/p&gt;

&lt;p&gt;So even if a Website passess all the accessibility checks but is heavy on text, with few visuals and the video content was thought only for people who can hear, it would not be accessible for that group.&lt;/p&gt;

&lt;h2 id=&quot;rethinking-accessibility-for-web-applications&quot;&gt;Rethinking Accessibility for Web Applications.&lt;/h2&gt;

&lt;p&gt;Instead of thinking of accessibility as something that’s added to the existing web application, it has to be included from the conceptual stages of the project. For a platform to be inclusive some assumptions must be re evaluated.&lt;/p&gt;

&lt;h3 id=&quot;same-goal-multiple-experiences&quot;&gt;Same goal, Multiple experiences&lt;/h3&gt;

&lt;p&gt;Instead of starting with a single User Experience and later trying to force it into being accesible, a platform can deliver a totally different experience based on the user preferences.&lt;/p&gt;

&lt;h3 id=&quot;user-intents&quot;&gt;User intents&lt;/h3&gt;

&lt;p&gt;Most Web applications can be defined by user intents: The user end goals&lt;/p&gt;

&lt;p&gt;Some example user intents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get traffic data&lt;/li&gt;
  &lt;li&gt;reserve a parking spot&lt;/li&gt;
  &lt;li&gt;search and retrieve articles related to a topic of interest&lt;/li&gt;
  &lt;li&gt;register for a local event&lt;/li&gt;
  &lt;li&gt;communicate with another user&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accessible-intents&quot;&gt;Accessible intents.&lt;/h3&gt;

&lt;p&gt;An accessible application has multiple experiences. Each experience implements the list of intents in a different way. For example&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Traditional Web experience : How most web sites are planned and implemented. Base HTML layout grouped by hierarchy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Audio based experience:  A voice based experience can be implemented, with voice commands as main input. Tap, double tap and other swipe gestures can be used as navigation aids too. Voice settings would ideally be set based on user preferences (pitch, speed, etc).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Visual experience for people with mobility problems: For people with reduced mobility a custom navitation system using eye tracking or wizard base navigation with yes/no could work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications would offer a way to query what experiences are supported, ways to switch between them.&lt;/p&gt;

&lt;p&gt;A user could switch to “audio based experience” and keep interacting with the web application using voice commands.&lt;/p&gt;

&lt;h3 id=&quot;the-role-of-user-agents&quot;&gt;The role of user agents&lt;/h3&gt;

&lt;p&gt;If we want the Web to be truly accessible, then the browsers must evolve to make it easy to “switch experiences” based on user previously set preferences.&lt;/p&gt;

&lt;p&gt;Right now every time a user visits a web site, the browser sends some data,things like browser version, operative system etc. The application server can use this to make some decisions on the data that would be returned to the client. However, there’s now way for a user to set her preferred experience. Ideally the browser would send a list of experiences so the particular experience can be delivered.&lt;/p&gt;

&lt;h3 id=&quot;the-dom-is-just-an-implementation-detail&quot;&gt;The DOM is just an implementation detail&lt;/h3&gt;

&lt;p&gt;The web distribution model is the main advantage of the platform. The DOM is just an implementation detail that we may replace with something else. For some web sites, having a WebGL based experience will be a good idea. A user with reduced mobility can use a vibrating device with a button as the controller and a custom experience  that narrates and understands that kind of input.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Accessibility is much more than optimizing for screen readers.  A web application can be thought as a series of user intents that can be delivered in a different way (experience). Ideally a Web application would offer ways to query supported experiences. Cooperation with the user agent would allow automatic selection of the best experience based on user preferences.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Thoughts on MobX for large projects</title>
   <link href="http://hugozap.github.com/software/2017/07/19/thoughts-on-mobx-for"/>
   <updated>2017-07-19T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/07/19/thoughts-on-mobx-for</id>
   <content type="html">
&lt;p&gt;[WIP]&lt;/p&gt;

&lt;h1 id=&quot;some-things-i-learned-about-mobx&quot;&gt;Some Things I Learned about MobX&lt;/h1&gt;

&lt;p&gt;I’ve been working with MobX for a while and these are some
of the lessons I’ve learned. Some of them are personal
preferences. I feel there’s still a lot of exploration to do before
standard patterns emerge that answer the question of how to structure the application state with mobx.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; There are some libraries out there that help to structure the stores. In this post I’m interested in exploring solutions with plain mobx before introducing more concepts and dependencies.&lt;/p&gt;

&lt;h2 id=&quot;split-ui-and-application-state&quot;&gt;Split UI and Application State?&lt;/h2&gt;

&lt;p&gt;When learning mobx I found a recommendation somewhere on
having a store for UI related stuff and another for 
application model stuff. This sounds good in theory, 
however as both UI and App stores started growing some issues appeared:&lt;/p&gt;

&lt;p&gt;Properties in the UI state may belong to different logical groups, so
having them in the same artifact (The UIState mobx store) didn’t feel good,
when working on a feature, I’m not interested in UI state properties that belong to another feature and scanning
the file looking for them was annoying.&lt;/p&gt;

&lt;p&gt;Based on the previous reflection, I realized that the distinction of UI state vs App State was not being helpful for the project. A mobx store is an application artifact and everything there has to do with the UI, so instead of having a separated store for UI things, we now have 1 store per logical unit. In our case we chose subsystems like authentication,search,admin etc, but I guess this depends on the nature of the project.&lt;/p&gt;

&lt;h2 id=&quot;domain-logic-on-mobx-stores&quot;&gt;Domain logic on mobx Stores&lt;/h2&gt;

&lt;p&gt;With computed fields, some logic can be included in the mobx stores. It’s easy to start adding domain logic there, however I don’t think this is a good idea. Mobx stores are just an mechanism to update the view in a smart way, but they are a technical artifact. Domain model rules should not have anything to do with mobx terminology.&lt;/p&gt;

&lt;p&gt;A better approach is to have the business rules in another module that nows nothing about mobx. From the mobx store, it’s easy to have a computed field that delegates the calculation to the domain logic module(s).&lt;/p&gt;

&lt;p&gt;Testing the domain rules is easier if they are separated from the mobx terminology.&lt;/p&gt;

&lt;h2 id=&quot;how-to-structure-a-store&quot;&gt;How to structure a store?&lt;/h2&gt;

&lt;p&gt;For complex UI’s the stores can get pretty messy and navigating them can be tricky. A mix of properties, computed fields and actions can turn into spaguetti. A practical solution to this problems include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If using a single file per store, group properties, actions and computed fields (Some people may prefer to group them by logical concerns)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Move actions to a separated file: With this approach, the mobx store gets splitted into multiple files&lt;/p&gt;

    &lt;p&gt;An example stores structure:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;search(Search Store folder)
        &lt;ul&gt;
          &lt;li&gt;store.js (properties are declared there, actions are imported here)&lt;/li&gt;
          &lt;li&gt;actions.js (extract the actions into a separate file)&lt;/li&gt;
          &lt;li&gt;computed.js (Worthy if there’s a lot of computed fields)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;users (Users Store folder)
        &lt;ul&gt;
          &lt;li&gt;store.js&lt;/li&gt;
          &lt;li&gt;actions.js&lt;/li&gt;
          &lt;li&gt;computed.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Structuring stores this way has the benefit of making it easy to locate things. When working in a feature
we can jump quickly to the related properties or actions of the feature/subsystem we are working on ignoring
everything else.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Everything in the mobx store is related to the UI so group by logical units (subsystems, entities, use cases) instead of UI vs App State.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Place domain logic in plain JS modules (that now nothing of MobX terminology) and import them from your stores&lt;/li&gt;
  &lt;li&gt;Experiment with different Store layouts. Optimize for maintenability.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Accessible Presentations</title>
   <link href="http://hugozap.github.com/software/2017/06/27/accessible-workshops"/>
   <updated>2017-06-27T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/06/27/accessible-workshops</id>
   <content type="html">
&lt;p&gt;Last month I conducted a workshop for programming students with limited hearing. I have given a lot of talks but felt  anxious about this one. I  wanted them to learn and be inspired by the workshop, so I prepared a lot starting 3 weeks before.&lt;/p&gt;

&lt;p&gt;I knew beforehand that their experience would range from total beginners with no programming experience to moderate experience in C# and Java. Most of them were new to the web platform.&lt;/p&gt;

&lt;p&gt;Some of the things I learned while preparing and giving the workshop:&lt;/p&gt;

&lt;h2 id=&quot;less-text-more-visuals&quot;&gt;Less text, more visuals&lt;/h2&gt;

&lt;p&gt;I was lucky to have the advice of a teacher who works with deaf students, her first recommendation was: “Do not add long paragraphs. They won’t follow”.&lt;/p&gt;

&lt;p&gt;It turns out that deaf people process words different and the way we write is not natural to them. Later she told me that most students struggle with long text explanations.&lt;/p&gt;

&lt;p&gt;With that in mind I replaced text explanations with diagrams or just removed them.&lt;/p&gt;

&lt;h2 id=&quot;small-steps&quot;&gt;Small steps&lt;/h2&gt;

&lt;p&gt;When the range of experience is diverse, it’s possible that some people need more time to complete a task and if the current one is prerequisite for the next they would be left behind and would quickly lost motivation.&lt;/p&gt;

&lt;p&gt;My strategy to avoid this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use CodePen (so no time wasted on setup)&lt;/li&gt;
  &lt;li&gt;Have a base pen &lt;a href=&quot;https://codepen.io/hugozap/pen/wdQMgM?editors=1010&quot;&gt;https://codepen.io/hugozap/pen/wdQMgM?editors=1010&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Start with basic, simple tasks and slowly increase difficulty.&lt;/li&gt;
  &lt;li&gt;For every step, have the solution on a Pen so if anyone is left behind, that person could start the next challenge from a good starting point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed the experience and days later the University contacted me because they asked for more workshops. That made me happy. Some students kept practicing and sharing their learning process with me and that’s always encouraging.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Muestra básica de JavaScript (Para talleres introductorios)</title>
   <link href="http://hugozap.github.com/software/2017/05/18/muestra-bsica-de-jav"/>
   <updated>2017-05-18T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/05/18/muestra-bsica-de-jav</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://hugozap.com/guia-principiantes-js/&quot;&gt;http://hugozap.com/guia-principiantes-js/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este repositorio se encuentra una muestra de algunas instrucciones
 y sintaxis de JavaScript.  La utilizamos en un taller reciente, pero
 puede ser de ayuda a quien quiera dar una introducción al lenguaje.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>ES6 Proxies</title>
   <link href="http://hugozap.github.com/software/2017/04/28/es6-proxies"/>
   <updated>2017-04-28T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/04/28/es6-proxies</id>
   <content type="html">
&lt;p&gt;A few days ago I was part of a BogotaJS event where each of the presenters had
to talk about a new ES6 feature. The topic I chose was ES6 Proxies. I read about them in the past but didn’t pay too much attention. Turns out they are cool.&lt;/p&gt;

&lt;p&gt;What are they for?&lt;/p&gt;

&lt;p&gt;Proxies allow the developer to intercept typical operations with JS objects like setting a property, getting its value, enumerating it’s own properties and others.&lt;/p&gt;

&lt;p&gt;The interesting part is that the default behavior can be overriden, so for example if the user tries to access a non existent property, a default one can be returned (instead of undefined)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'you are trying to access:'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;edad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Name:'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// Outputs: Name: you are trying to access:name&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the code above we rendered our object useless by always returning
the string ‘you are trying to access:PROPERTY’ instead of the object value&lt;/p&gt;

&lt;p&gt;Some interesting things that can be done with proxies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intercept a property assignment operation and run validation logic to set the final value&lt;/li&gt;
  &lt;li&gt;Reject modification of object properties starting with a character like underscore&lt;/li&gt;
  &lt;li&gt;Expire objects ( revocable proxies ). This will throw an error on most object operations&lt;/li&gt;
  &lt;li&gt;Do some crazy stuff like parsing the name of a non existant function and return a custom function based on that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another not very practical example (but with potential applications). This proxy makes it possible to chain non existant properties and prints them to the console.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hola&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amigos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ó&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;est&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;á&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would print the string “hola amigos como están”. 
The trick is to return the same handler whenever a property value 
is requested. It doesn’t matter if the property exists.&lt;/p&gt;

&lt;p&gt;Besides obvious uses like instrumentation or validation
there may be creative uses of proxies out there worth exploring.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>React Motion and A-Frame demo. Animating the camera position using springs</title>
   <link href="http://hugozap.github.com/software/2017/03/14/react-motion-and-afr"/>
   <updated>2017-03-14T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/03/14/react-motion-and-afr</id>
   <content type="html">&lt;p&gt;A  demo I created for a BogotaJS presentation about using declarative 3D with a-frame and react. It uses React Motion to animate the camera position naturally.&lt;/p&gt;

&lt;iframe src=&quot;https://hugozap.neocities.org/x99/&quot; width=&quot;80%&quot; height=&quot;400px&quot;&gt;unwanted text&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://hugozap.neocities.org/x99/&quot;&gt;Open Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/visual/blob/master/src/scenes/Spheres.js&quot;&gt;Scene Source&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aframe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aframe-react'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-motion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpheresScene&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;spherePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;spherePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Motion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color: #ed9ee6; metalness: 0.1&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Motion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color: #c3dc74; metalness: 0.1&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Motion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
 

          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userHeight: 1.8&quot;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Entity&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Scene&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpheresScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Teaching programming with JavaScript.</title>
   <link href="http://hugozap.github.com/software/2017/03/13/teaching-programming"/>
   <updated>2017-03-13T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2017/03/13/teaching-programming</id>
   <content type="html">
&lt;p&gt;Hace poco tuve una conversación con los organizadores de una comunidad
que realiza eventos que promueven el desarrollo con JavaScript. Hablamos acerca de los desafíos de eventos  dirigidos a principiantes. Mantener la motivación es uno de los factores críticos. No es fácil planear ni ejecutar talleres donde todos sientan que aprendieron algo, y más importante, donde se siembre la curiosidad por seguir experimentando y aprendiendo.&lt;/p&gt;

&lt;p&gt;Pensando en ello me doy cuenta de algunos enfoques que pueden determinar el éxito de un taller para principiantes&lt;/p&gt;

&lt;h2 id=&quot;primero-veamos-enfoques-que-pueden-aburrir-o-frustrar-a-los-participantes&quot;&gt;Primero veamos enfoques que pueden aburrir o frustrar a los participantes:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Dedicar mucho tiempo al setup del entorno.&lt;/li&gt;
  &lt;li&gt;Tratar de abordar muchos conceptos a la vez.&lt;/li&gt;
  &lt;li&gt;Ejercicios donde no hay retroalimentación frecuente.&lt;/li&gt;
  &lt;li&gt;Talleres complejos con un único resultado correcto.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;características-de-un-taller-que-motiva&quot;&gt;Características de un taller que motiva:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Usar un conjunto pequeño de conceptos.&lt;/li&gt;
  &lt;li&gt;Reducir/Eliminar dependencias a instalar/explicar (npm, node, git..)&lt;/li&gt;
  &lt;li&gt;Usar elementos visuales (animaciones/transiciones)&lt;/li&gt;
  &lt;li&gt;No hacer competir a los participantes. (Talleres abiertos donde la creatividad puede generar diferentes resultados)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usando-código-creativo-para-motivar-la-magia-de-los-pixeles-moviéndose&quot;&gt;Usando código creativo para motivar (La magia de los pixeles moviéndose)&lt;/h2&gt;

&lt;p&gt;Es maravilloso ver que algo se mueve en la pantalla, cambia de color o se desvanece. Nuestro cerebro está bien equipado para entender el movimiento, además de ser un concepto fácil de explicar con elementos de JavaScript.&lt;/p&gt;

&lt;p&gt;Estos principios los pondremos en práctica pronto en un taller dirigido a principiantes.&lt;/p&gt;

&lt;p&gt;Update: Funcionó bastante bien…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Migrate your mixins to High Order Components</title>
   <link href="http://hugozap.github.com/software/2016/09/25/migrate-your-mixins"/>
   <updated>2016-09-25T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/09/25/migrate-your-mixins-</id>
   <content type="html">
&lt;p&gt;Note: Although this was written with react in mind, it also applies to similar concepts like “behaviors” in Polymer. However implementation may be different and not that easy with other libraries.&lt;/p&gt;

&lt;p&gt;High Order Components in a nutshell are just functions that receives a Component as argument and returns a new component with extended behavior. With them is possible to create new components by composing existing ones.&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong-with-mixins&quot;&gt;What’s wrong with mixins?&lt;/h2&gt;

&lt;p&gt;Dan Abramov explains it well here: &lt;a href=&quot;https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html&quot;&gt;https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-handling-keydown-events&quot;&gt;Example, handling keydown events&lt;/h2&gt;

&lt;p&gt;Suppose you have an “overlay” mixin that handles a global keydown event and sets the state property active to false, so when the user presses ESC the active overlays (dropdowns, sidebars, modals) get hidden.&lt;/p&gt;

&lt;p&gt;We will create an HOC that receives a component and handles the keydown event for a particular key. When that key is pressed the callback parameter is called passing the element instance as 1st parameter and the DOM event as the 2nd one:&lt;/p&gt;

&lt;p&gt;ConnectGlobalKeyHandler.js:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyDown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;handleKeyDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keydown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keydown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleKeyDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that in place is easy to extend the behavior of an existing component:&lt;/p&gt;

&lt;h3 id=&quot;example-adding-esc-keydown-event-to-a-sidebar-component&quot;&gt;Example: Adding ESC keydown event to a SideBar component&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Connect the ESC global keydown event and call the onCloseClicked property */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SideBarEsc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConnectGlobalKeyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SideBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KeyCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCloseClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reusing-the-same-behavior&quot;&gt;Reusing the same behavior&lt;/h3&gt;

&lt;p&gt;Suppose we have 3 components (Modal, SideBar, DropDown) and we want all of them to respond in the same way to ESC key being pressed. We can create a specific HOC on top of the previous one:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HideOverlayWhenEscPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OverlayComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConnectGlobalKeyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OverlayComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KeyCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ESC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCloseClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then it’s easy to extend existing components behavior:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ModalDialog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HideOverlayWhenEscPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ModalDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DropDown&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HideOverlayWhenEscPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DropDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can compose multiple HOC:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DropDown&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HighlightWhenHovered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HideOverlayWhenEscPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DropDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What I like the most about this approach is that specific functionality lives on each HOC, and we don’t have to deal with a big mixin that usually gets difficult to change over time.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Functional CSS for your next project</title>
   <link href="http://hugozap.github.com/software/2016/09/09/functional-css-in-re"/>
   <updated>2016-09-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/09/09/functional-css-in-re</id>
   <content type="html">
&lt;h2 id=&quot;whats-functional-css&quot;&gt;What’s functional CSS?&lt;/h2&gt;

&lt;p&gt;Functional CSS is an alternative approach that you can use to define the visual properties and styles of your Web site. It’s not about new technologies or libraries, but a set of principles like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write the least amount of CSS stylesheets.&lt;/li&gt;
  &lt;li&gt;Use small units to compose your interfaces. These are defined as single purpose CSS classses (e.g w-100 means width:100%)&lt;/li&gt;
  &lt;li&gt;Focus on composability and avoid the cascade in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is that you can create most of your layouts without creating custom classes. Instead you use small units (defined as single purpose classes) that do one thing only and when applied to an element exerts the desired change.&lt;/p&gt;

&lt;p&gt;E.g&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dib ph1 w-50 bg-blue&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this case we are using the following css atoms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dib: display: inline-block&lt;/li&gt;
  &lt;li&gt;ph1: set horizontal padding to one of our predefined scale values (for consistency)&lt;/li&gt;
  &lt;li&gt;w-50: set the width to 50%&lt;/li&gt;
  &lt;li&gt;bg-blue: set background to blue&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-wrong-with-traditional-css-approach&quot;&gt;What’s wrong with traditional CSS approach?&lt;/h2&gt;

&lt;p&gt;If you are not familiar with this approach you may be thinking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That’s not semantic.&lt;/li&gt;
  &lt;li&gt;I could easily create a class that groups those declarations.&lt;/li&gt;
  &lt;li&gt;the html class will grow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding ‘semantics’, the problem is that traditional css thinking implies that semantics relates to the business problem, but that’s different from visual semantics. When working with html you are already working with the view, so it’s ok to decorate your elements with small classes that define a visual behavior.&lt;/p&gt;

&lt;h2 id=&quot;how-a-traditional-css-evolves-until-it-implodes&quot;&gt;How a traditional CSS evolves until it implodes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;project starts with a clean css&lt;/li&gt;
  &lt;li&gt;devs add classes that represent the application model (not the visual model) like ‘user-details, payment-form, company-info1, company-info2, etc…’&lt;/li&gt;
  &lt;li&gt;devs decide that they want to avoid rule duplication so they will create parent classes e.g panel-details, panel-details-sub, base-form&lt;/li&gt;
  &lt;li&gt;The project grows and things start to require their own rules. Sometimes they look really similar but just override a couple of things, other times just a few rules are shared and the rest is overrided.&lt;/li&gt;
  &lt;li&gt;devs keep creating custom rules targetting the specific elements and overriding them e.g #new-person-details, #customerabc-form, etc.&lt;/li&gt;
  &lt;li&gt;project keeps growing and devs keep adding classess, sometimes overriding declarations.&lt;/li&gt;
  &lt;li&gt;At some point, because the different possible overrides, it’s not easy to change a base class without breaking something else, so the CSS class race starts:  Override properties with !important and adding classess at the bottom of the file.&lt;/li&gt;
  &lt;li&gt;When a change is required, nobody touches previous declarations anymore and just add a new class that overrides what’s needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s not easy to avoid the previous scenario with the traditional CSS best practices. Check the custom css files of some popular sites and you will see that. Other problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s not easy to optimize, with all the overrides the confidence to change something is lost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compose-your-ui-from-small-units&quot;&gt;Compose your UI from small units&lt;/h2&gt;

&lt;p&gt;By using the functional approach I’ve found the iteration is faster because we are working directly with the element we want to change. If I see an element declared as&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pa2 f4 absolute top-0 w-100 w-25-ns&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s easy to infer how the component will behave. In this case the element will have a padding value of –second-value-in-default-scale, a font size equal to –fourth-value-in-scale, it’ll have absolute positioning,  it’s top value will be 0 and it’s width equal to 100%. Also w-25-ns means it will have a width = 25% if the screen is not small, that’s great we are even specifying responsive behavior conditions. Check  the [tachyons] components for more examples.&lt;/p&gt;

&lt;p&gt;Working this way requires a different mindset and may feel weird at the beginning but when you get familiar with the small unit classes (atoms) you will enjoy composing your UI’s. also, it’s fun.&lt;/p&gt;

&lt;p&gt;Note: Tachyions has a predefined set of distances, font sizes, margins, widths that were created for consistency and proportion but can be changed easily. I’ve found the defaults will get you far. In any case avoid using magic numbers for css values.&lt;/p&gt;

&lt;h2 id=&quot;about-duplication&quot;&gt;About duplication&lt;/h2&gt;

&lt;p&gt;With this approach the class attribute can be grow a lot. I don’t think that’s a big deal,  we are using a the same atoms frequently so they will appear a lot on our html. That’s a small tradeoff but the benefit is much more important, you can now see the markup and have a better idea of how elements will look.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Web Components as React leaf nodes</title>
   <link href="http://hugozap.github.com/software/2016/09/05/web-components-as-re"/>
   <updated>2016-09-05T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/09/05/web-components-as-re</id>
   <content type="html">
&lt;p&gt;There’s been a lot of discussion regarding the usage of Web Components and their relation with frameworks. As usual in the tech community, people (myself included) sometimes attach their identities to some particular technology and that prevents a healthy discussion.&lt;/p&gt;

&lt;p&gt;After some thought I see the value in working with Web Components and using them with current tools/frameworks/libraries. The good thing about Web components is that they can be used in the same way other html elements are used. Common tasks like handling events work the same way as normal DOM elements(myCustomEl.addEventListener) and because WC is a platform feature (with increasing support in all modern browsers) everybody benefits.&lt;/p&gt;

&lt;p&gt;Having used Polymer a lot in the past I had some confussion regarding compatibility with React components. My problem was that (like a lot of devs) all the exposure I’ve had to Web Components has been through Polymer and because Polymer uses additional abstractions and has it’s own established development workflow (somewhat separated from the current ecosystem) it was not easy to imagine how to use WC outside of the Polymer way of doing things.&lt;/p&gt;

&lt;p&gt;Recently I found about the &lt;a href=&quot;https://aframe.io/&quot;&gt;a-frame&lt;/a&gt; project. A really interesting VR library for the web that uses Web Components to create scenes in a declarative way. I wanted to try it with a simple react skeleton app ( created using create-react-app ).&lt;/p&gt;

&lt;p&gt;I searched for a-frame react and found &lt;a href=&quot;https://github.com/ngokevin/aframe-react&quot;&gt;aframe-react&lt;/a&gt; a project that converts some of the a-frame primitives to React elements. Curious about what’s required to do the conversion I checked &lt;a href=&quot;https://github.com/ngokevin/aframe-react/blob/master/src/index.js&quot;&gt;https://github.com/ngokevin/aframe-react/blob/master/src/index.js&lt;/a&gt; and there’s nothing misterious about it. For example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onEnterVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onExitVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onEnterVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onExitVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;attachEvents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'enter-vr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onEnterVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exit-vr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onExitVR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'loaded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attachEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serializeComponents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a-scene&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Custom Web Component element is a-scene and you can see it’s being used normally in the render method. The serializeComponents(this.props) call is just a utility method that stringifies components passed as an object, so: someAttr={primitive: box; width: 10} becomes someAttr=’primitive: box; width: 10’&lt;/p&gt;

&lt;p&gt;For it to work, the a-scene element must be registered previously. That can be done by importing the ‘aframe’ module or including the script tag in the index.html&lt;/p&gt;

&lt;p&gt;I did a quick example including &lt;a href=&quot;https://github.com/chenglou/react-motion&quot;&gt;react-motion&lt;/a&gt; (physics based animation using springs) and it worked great.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./logo.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./App.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aframe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aframe-react'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-motion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;spherePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;spherePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Motion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          
          &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Duplicated&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;non&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interesting&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userHeight: 1.8&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controls&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Entity&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color: cyan; metalness: 0.7&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Entity&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sky&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Scene&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/hugozap/da13f467352fe127c6c47e9ad754ebcb&quot;&gt;source here&lt;/a&gt;
This is the result&lt;/p&gt;

&lt;blockquote class=&quot;twitter-video&quot; data-lang=&quot;es&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;React Motion can be used to add physics based animation (spring) to a-frame apps for cool VR or 3D experiences. &lt;a href=&quot;https://t.co/KxTh3JbbvM&quot;&gt;pic.twitter.com/KxTh3JbbvM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hugo Zapata (@hugozap) &lt;a href=&quot;https://twitter.com/hugozap/status/772298823582437376&quot;&gt;4 de septiembre de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;One of the misconceptions I had with WC is thinking HTML Imports are required (because that’s what Polymer components use). That’s not true from what I’ve seen. Just make sure at some point registerElement is called for the custom web component (Usually that’s done by the WC npm module)&lt;/p&gt;

&lt;p&gt;I hope to keep learning about new usage patters and how to integrate WC in my workflow. Fortunately from what I’ve seen in recent twitter threads, the Chrome developer relations team is commited to keep promoting WC and their integration with the current ecosystem.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using physics for natural web animations</title>
   <link href="http://hugozap.github.com/ui/2016/08/23/using-physics-for-wn"/>
   <updated>2016-08-23T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/ui/2016/08/23/using-physics-for-wn</id>
   <content type="html">
&lt;p&gt;I’ve been experimenting with using spring physics for UI animation and it makes a lot of sense. By using a physics model to move things we manage to get effects that look more natural. They just feel right compared to artificial non natural easings.&lt;/p&gt;

&lt;p&gt;The idea is simple, you have an update loop. (Ideally using requestAnimationFrame) and using the t parameter you can get the calculated spring value for that moment in time. Then with the calculated value you have to use it to move/grow/shrink/rotate or whatever variable you are changing.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//pseudocode&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Do something with currentValue every frame&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the previous code we assume some default parameters for the physics model (stiffness/ damping / mass).&lt;/p&gt;

&lt;p&gt;With that in place, you can for example add an event listener to a mouse click and change the ‘target’ value and currentValue will eventually be equal to target, but meanwhile you will see the animation.&lt;/p&gt;

&lt;p&gt;For a concrete implementation you can check &lt;a href=&quot;https://codepen.io/rachsmith/post/hack-physics-and-javascript-part-3-springs-and-some-other-things&quot;&gt;this blog post&lt;/a&gt; from Rachel Smith&lt;/p&gt;

&lt;p&gt;If you are using react, the same concept is used in the popular react-motion module. The usage is very simple&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Motion&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interpolatingStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interpolatingStyle&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Motion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>SVG and CSS animation practice, kitten</title>
   <link href="http://hugozap.github.com/software/2016/08/03/svg-and-css-animatio"/>
   <updated>2016-08-03T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/08/03/svg-and-css-animatio</id>
   <content type="html">
&lt;p&gt;A quick demo for animating svg’s with CSS. The scene was created in sketch.&lt;/p&gt;

&lt;iframe src=&quot;http://hugozap.neocities.org/cat1/&quot; width=&quot;100%&quot; height=&quot;300px&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.neocities.org/cat1/&quot;&gt;http://hugozap.neocities.org/cat1/&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The simplest HTML presentation tool with only CSS using the (:target trick)</title>
   <link href="http://hugozap.github.com/software/2016/07/13/the-simplest-html-pr"/>
   <updated>2016-07-13T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/07/13/the-simplest-html-pr</id>
   <content type="html">
&lt;p&gt;Sometimes you just need to create presentation slides quickly. Maybe you don’t want to use any tool or package. Just a simple html file without JavaScript&lt;/p&gt;

&lt;p&gt;You can save the following html locally, modify it and open the file in the browser. It’s great for creating slides quickly without depending on 3rd party services or tools.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/quick-talk&quot;&gt;https://github.com/hugozap/quick-talk&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;I was reading about the CSS :target trick and it occured to me that a  basic presentation tool  is a very simple but useful case. Using just a few lines of CSS and zero JavaScript you can get basic interactivity.&lt;/p&gt;

&lt;p&gt;Here’s an image gallery with only CSS, using the :target selector:&lt;/p&gt;

&lt;iframe src=&quot;http://hugozap.neocities.org/experiments/gallerycss.html&quot; frameborder=&quot;0&quot; width=&quot;600px&quot; height=&quot;500px&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;state-in-css&quot;&gt;State in CSS&lt;/h2&gt;

&lt;p&gt;The :target selector gives us the ability to apply different style rules to the current html segment, activated by clicking an anchor with href=”#someId”.
So if a user clicks a link that points to an HTML segment we can highlight it and hide other segments by using a combination of :not(:target) selectors.&lt;/p&gt;

&lt;p&gt;This is similar to the techniques used that require adding an input element of type checkbox so we can use the :checked pseudo selector.&lt;/p&gt;

&lt;p&gt;For the previous example this is the relevant CSS code.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.slide&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* Replace with custom animation for better transitions */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-120%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;slide&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One rule to hide elements that are not the current :target and the other rule to style the current target element.&lt;/p&gt;

&lt;p&gt;An unexpected sideffect of using this technique is that everytime we click a link , we add a histoy item. So if we click the browser back button we activate the previous item. This may or may not be what you need. In the case of html slides it’s ok.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Identidad y creación</title>
   <link href="http://hugozap.github.com/random/2016/07/05/identidad"/>
   <updated>2016-07-05T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/random/2016/07/05/identidad</id>
   <content type="html">
&lt;p&gt;Con qué me identifico?
Aunque trabajo creando y manteniendo software, no me identifico como programador.  Escribo programas y me pagan por ello pero es solo una parte de las cosas que me interesan y que hago. El código es una herramienta, me permite expresar ideas y llegarle a muchas otras personas. Es un medio, pero no es el fín, aunque es muy divertido.&lt;/p&gt;

&lt;p&gt;Antes creaba dibujos, a veces creo íconos. A veces diseño, a veces escribo.
En realidad nada se crea de ceros. Más bien transformamos creativamente. Lo importante es cultivar el espiritu de la creatividad , de la invención y casi todo puede ser objeto de ser modificado, mejorado para algún propósito funcional o simplemente por estética. La creación y el diseño están entrelazados. Buscamos belleza, simplicidad, función.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Aprender algo nuevo [Parte 1]</title>
   <link href="http://hugozap.github.com/learning/2016/06/21/aprender-algo-nuevo"/>
   <updated>2016-06-21T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/learning/2016/06/21/aprender-algo-nuevo</id>
   <content type="html">
&lt;h3 id=&quot;introducción&quot;&gt;Introducción&lt;/h3&gt;

&lt;p&gt;Con frecuencia estoy buscando pequeños ajustes a mi forma de abordar la tarea de aprender algo nuevo. Algunos experimentos han funcionado mejor que otros pero en general me considero bueno para aprender temas nuevos con rapidez, y esto ha sido de gran utilidad para temas laborales, y otros de la vida.&lt;/p&gt;

&lt;p&gt;A continuación presento algunas ideas que pueden ser de utilidad a quien quiera aprender algo. No soy especialista en aprendizaje, es un tema que me interesa y los argumentos que presento parten de mis experiencias personales.&lt;/p&gt;

&lt;h3 id=&quot;síntomas-de-errores-en-nuestro-proceso-de-aprendizaje&quot;&gt;Síntomas de errores en nuestro proceso de aprendizaje.&lt;/h3&gt;

&lt;p&gt;Los síntomas de que algo falla en nuestro proceso de aprendizaje:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Perder la motivación muy rápido&lt;/li&gt;
  &lt;li&gt;Sentir frustración y desistir por sentirnos abrumados&lt;/li&gt;
  &lt;li&gt;Cuestionamiento de nuestras habilidades&lt;/li&gt;
  &lt;li&gt;Mucho tiempo invertido estudiando materiales pero al hacer una evaluación interna honesta sentimos que estamos avanzando muy poco&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tipo-de-contenido-y-estrategia-para-aprender&quot;&gt;Tipo de contenido y estrategia para aprender&lt;/h3&gt;

&lt;p&gt;Antes de aprender algo hay que diferenciar el tipo de contenido, pues la naturaleza del contenido y del tema a aprender nos da pistas sobre cual puede ser la mejor estrategia para abordar el tema.&lt;/p&gt;

&lt;p&gt;Por ejemplo, si queremos estudiar y  entender la obra de un escritor nuestra estrategia posiblemente sea diferente a la que usaríamos si estamos estudiando un tema científico o estamos aprendiendo a manejar un programa de computador.&lt;/p&gt;

&lt;p&gt;La obra de un autor puede ser abordada de diferentes maneras, podemos leer un libro que nos guste y después retroceder hasta llegar a sus primeras obras e ir creandonos un mapa mental de como fue evolucionando su estilo. Las primeras obras de un escritor tal vez no sean de buena calidad, y por ello algunas personas pueden empezar con sus obras más populares para no perder la motivación. Para otros puede ser mejor aprender en orden cronológico aunque eso les implique estudiar material de menor calidad, sin embargo tienen la paciencia para ello. Depende mucho la motivación, capacidad de mantener la atención y esto varía. A algunos les gusta saber todos los detalles, otros son orientados a objetivos específicos.&lt;/p&gt;

&lt;p&gt;Otro tipo de contenidos no ofrecen la flexibilidad del ejemplo anterior, particulármente material científico, matemáticas, programación. Son áreas de conocimiento donde es requisito aprender primero las bases antes de poder entender conceptos de mayor nivel. Sin embargo esto no quiere decir que la estrategia de aprendizaje tenga que ser la misma. Siempre hay espacio para ajustarla según el perfil de la persona. La manera como se abordan los fundamentos puede ser también personalizada, pero de alguna manera hay que aprenderlos para poder seguir construyendo nuestro mapa de conocimiento mental.&lt;/p&gt;

&lt;p&gt;Por ejemplo:&lt;/p&gt;

&lt;p&gt;Algunas personas aprenden matemáticas haciendo ejercicios y se sienten agusto con conceptos abstractos
Otras personas necesitan ver primero la posible aplicación y no se sienten cómodos solo con abstracciones que nada tienen que ver con su realidad.&lt;/p&gt;

&lt;h2 id=&quot;lectura-en-varias-pasadas&quot;&gt;Lectura en varias pasadas&lt;/h2&gt;

&lt;p&gt;Para ciertos temas, es posible realizar varias lecturas del material de principio a fín. Una primera lectura rápida donde obviamos los detalles que no entendemos y donde el objetivo es formarnos una idea de lo que nos espera. Esta primera lectura nos brinda información útil como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tenemos una idea de cómo se clasifica el tema en  categorías generales (los capítulos del libro)&lt;/li&gt;
  &lt;li&gt;Nos familiarizamos con la terminología ( aunque no la entendamos )&lt;/li&gt;
  &lt;li&gt;Nos damos cuenta de las características del contenido ( es visual? técnico? párrafos extensos o compilación de hechos cortos?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una lectura inicial puede ser valiosa para ajustar nuestras expectativas frente al material. Nos podemos dar cuenta que sólo nos interesa estudiar una fracción del material o que primero debemos consultar otras fuentes.&lt;/p&gt;

&lt;p&gt;La lectura en varias pasadas puede ser algo incómoda para quienes sienten la necesidad de entender todo muy bien antes de continuar, pero tiene beneficios ya que el conocimiento no siempre se construye en el orden sugerido por el autor. Cada libro es interpretación de los hechos y está atado a la manera de pensar y aprender del autor, que no necesariamente sea compatible con nuestra manera de aprender. Por ello no debemos desistir tan rápido cuando el material en frente nuestro parezca tedioso. Puede servir consultar otra fuente y tal vez nos daremos cuenta que el problema no era el tema sino la forma en que estaba explicado.&lt;/p&gt;

&lt;p&gt;… Parte 2 próximamente …&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Quickly create a jekyll post and start editing</title>
   <link href="http://hugozap.github.com/software/2016/06/02/quickly-create-a-jek"/>
   <updated>2016-06-02T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/06/02/quickly-create-a-jek</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/new-jekyll-post&quot;&gt;new-jekyll-post&lt;/a&gt; creates a new blog post file for you and automatically opens the default text editor.&lt;/p&gt;

&lt;p&gt;Just set the JEKYLLPATH env variable to your jekyll blog root path and run&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new-jekyll-post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Share data between user sessions with airpaste</title>
   <link href="http://hugozap.github.com/software/2016/06/01/share-data-between-sessions"/>
   <updated>2016-06-01T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2016/06/01/share-data-between-sessions</id>
   <content type="html">
&lt;p&gt;I use different user sessions on the same computer to separate
personal / work environments. When I need to share some file or text
between them I use a litte utility called &lt;a href=&quot;https://github.com/mafintosh/airpaste&quot;&gt;airpaste&lt;/a&gt;
created by &lt;a href=&quot;https://github.com/mafintosh/&quot;&gt;mafintosh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s designed to share text,files or other streams across 2 computers on the same
local network, but works fine across sessions on the same computer.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;install nodejs on your computers&lt;/li&gt;
  &lt;li&gt;from the command line type: npm install -g airpaste&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;example&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;To share the clipboard contents from a Mac&lt;/p&gt;

&lt;p&gt;From Mac 1)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;gt;  pbpaste | airpaste
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From computer 2)
     &amp;gt; airpaste
     (outputs) &amp;gt; “This is some text”&lt;/p&gt;

&lt;p&gt;This is much more elegant than having to send an email, or sending a skype/messenger message&lt;/p&gt;

&lt;p&gt;(Note: pbpaste is not available in linux/windows but there are alternatives for those OSs)&lt;/p&gt;

&lt;h3 id=&quot;sharing-a-file&quot;&gt;Sharing a file:&lt;/h3&gt;

&lt;p&gt;From computer 1)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cat myfile.mp3&lt;/td&gt;
      &lt;td&gt;airpaste&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;From computer 2)&lt;/p&gt;

&lt;p&gt;airpaste &amp;gt; myfile.mp3&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Learning Emacs project [Part 2]</title>
   <link href="http://hugozap.github.com/emacs/2016/02/09/learning_emacs_part2"/>
   <updated>2016-02-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/emacs/2016/02/09/learning_emacs_part2</id>
   <content type="html">
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I find some errors in my emacs config and try to solve them by modifying the .emacs file (using emacs), a small test of basic navigation, saving and locks.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ok so I started emacs and I get some warning saying that something is wrong with the configuration. As suggested I start emacs with the –debug-init option.&lt;/p&gt;

&lt;p&gt;The error says:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void-variable viper-vi-global
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I looked and viper provides some vi emulation. I’m not interested in that and don’t remember why I messed with that in the past or how it got there.&lt;/p&gt;

&lt;p&gt;But I’m not interested in that so I will remove that plugin. But how?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I now remember that in my first attempt to learn emacs I installed a package called ‘ace-jump’ and pasted some setup on my .emacs file located on 
     /Users/myusername/.emacs&lt;/p&gt;

&lt;p&gt;The culprit was this line I didn’t pay attention to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;;;If you use viper mode :
(define-key viper-vi-global-user-map (kbd &quot;SPC&quot;) 'ace-jump-mode)
;;If you use evil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I deleted those lines using (from emacs!).  using the basic commands for movement (next/previous/forwared/backwards)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C-n to move to next line (next)&lt;/li&gt;
  &lt;li&gt;C-p to move to previous line (previous)&lt;/li&gt;
  &lt;li&gt;C-b (backwards to previous character)&lt;/li&gt;
  &lt;li&gt;C-f (forwards to next character)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also C-v to jump to the next visible Screen&lt;/p&gt;

&lt;p&gt;Not sure how to select text, tried Shift and right arrow to set a mark to highlight the paragraph and then Backspace. It worked.&lt;/p&gt;

&lt;p&gt;How to delete the current line?
…googles…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-Shift Backspace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google answer summary says that I can execute kill-whole-line command but I don’t know how to run a command yet.&lt;/p&gt;

&lt;p&gt;How to save the file? 
…googles…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a good time to search for a Cheat sheet. So I google and find this one that looks good. I’ll print it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf&quot;&gt;https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I try to open a file from emacs&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can type the path, autocomplete works but I get a list of possible options that match the current path. (not visible here: emacs colors one letter of each option)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In this buffer, type RET to select the completion near point.
Possible completions are:
.eclipse/                 .eclipse_keyring          .electron/
.emacs                    .emacs.d/                 .emacs~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I assume RET is return? (I press Enter and it didn’t work as expected, a new file with the partial name .em was created and I wanted to open .emacs ) I don’t know yet how to manage buffers so I’m sure I’m doing something wrong.&lt;/p&gt;

&lt;p&gt;So I repeat&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this time using just TAB to keep autocompleting until all the file name is written.&lt;/p&gt;

&lt;p&gt;I open the file and need to search for some text.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-s let's you search forward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the search the cursor is positioned on the line I need to delete. 
(For some reason C-S Backspace is not working here)&lt;/p&gt;

&lt;p&gt;Another way to delete is (going to the beginning of the line and delete until end)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-a
C-k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I did some characters erroneusly, let’s look how to undo…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point I repeat the key combination and must have activated another commands because I’m now on other buffer. That’s not what I want. abort mission (C-z) and try again.&lt;/p&gt;

&lt;p&gt;I open emacs again, and when trying to save the file I get&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/hugozap/.emacs locked by hugozap@hugoz... (pid 45537): (s, q, p, ?)?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What does those options mean? let’s investigate…&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html&quot;&gt;http://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;s = Steal the lock&lt;/li&gt;
  &lt;li&gt;p = Proceed&lt;/li&gt;
  &lt;li&gt;q = quit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use option ‘s’ to steal the lock and then write the file with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C-x s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart emacs and everything’s ok (First Win)&lt;/p&gt;

&lt;h3 id=&quot;next&quot;&gt;Next&lt;/h3&gt;

&lt;p&gt;From the quick documentation review I’ve done I keep finding tips like “Run this command”, “set this variable”, etc. I don’t know how to do that yet, and will make a jump to understanding some of the basic Lisp for emacs now.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Learning Emacs project [Part 1]</title>
   <link href="http://hugozap.github.com/emacs/2016/02/09/learning_emacs_part1"/>
   <updated>2016-02-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/emacs/2016/02/09/learning_emacs_part1</id>
   <content type="html">
&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;

&lt;p&gt;I will be logging my progress towards learning Emacs and replace Sublime Text as my main text editor. (Sublime is great, and recently it looks like work on it has resumed!)&lt;/p&gt;

&lt;p&gt;In the past I’ve tried to learn it but quickly lost the motivation (or just forgot about it) and just kept using Sublime Text. This time I’m doing it for the fun of learning a well tested and respected UNIX tool, the challenge of learning Common Lisp, investing in a tool that will be around X years in the future and as a personal challenge that involves overcoming the initial frustation of not being able to do basic things. Feeling like a noob.&lt;/p&gt;

&lt;p&gt;I considered Vim and may learn it in the future, however right know (not knowing any of the two) I’m more inclined to Common Lisp for customization purposes over Vimscript. Also, I’m interested in Org mode and I hope to get into that later.&lt;/p&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;p&gt;The main goal is to feel proficient with Emacs to the same level I’m with Sublime and more (Learning how to create plugins for it, which I haven’t done in Sublime either).&lt;/p&gt;

&lt;p&gt;This is a vague goal, so I wrote a list of questions/use cases I should be able to do with Emacs. I divided into “Essentials” and “Power features”. Learning all the essentials will put me at the same level of my Sublime Text knowledge.&lt;/p&gt;

&lt;h2 id=&quot;essentials&quot;&gt;Essentials&lt;/h2&gt;
&lt;p&gt;Files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create&lt;/li&gt;
  &lt;li&gt;rename&lt;/li&gt;
  &lt;li&gt;delete&lt;/li&gt;
  &lt;li&gt;Switch between currently opened files&lt;/li&gt;
  &lt;li&gt;quickly locate a file under current directory/project&lt;/li&gt;
  &lt;li&gt;Manage projects?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Layout:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Split panes (or just use tmux? )&lt;/li&gt;
  &lt;li&gt;File tree explorer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Editor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Select all text&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select current line*&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select current word*&lt;/li&gt;
  &lt;li&gt;Quickly move the cursor to some position, line, word, character*&lt;/li&gt;
  &lt;li&gt;Replace n word ocurrences (multiselect and replace)*&lt;/li&gt;
  &lt;li&gt;Copy and paste formatted (keeping indentation)*&lt;/li&gt;
  &lt;li&gt;Select a “square” portion of thext and copy/paste it*&lt;/li&gt;
  &lt;li&gt;Add bookmarks to some line number*&lt;/li&gt;
  &lt;li&gt;Quickly switch between bookmarks*&lt;/li&gt;
  &lt;li&gt;Clear bookmarks*&lt;/li&gt;
  &lt;li&gt;manage snippets*&lt;/li&gt;
  &lt;li&gt;Navigate to symbols (classes, functions…)*&lt;/li&gt;
  &lt;li&gt;Have multiple “buffers” in clipboard, selective paste*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install a plugin*&lt;/li&gt;
  &lt;li&gt;Remove a plugin*&lt;/li&gt;
  &lt;li&gt;Change plugin bindings*&lt;/li&gt;
  &lt;li&gt;Solve key binding conflicts*&lt;/li&gt;
  &lt;li&gt;Disable a plugin/enable*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Processes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run commands*&lt;/li&gt;
  &lt;li&gt;Run a command everytime a file is saved*&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced&quot;&gt;Advanced&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Creating a plugin*&lt;/li&gt;
  &lt;li&gt;Distribute a plugin*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to document most of this journey in case there’s somebody in a similar position.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Web sockets and streams (boilerplate)</title>
   <link href="http://hugozap.github.com/software/2015/11/25/websockets-streams-realtime-boilerplate"/>
   <updated>2015-11-25T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2015/11/25/websockets-streams-realtime-boilerplate</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/basic-realtime-boilerplate&quot;&gt;Check the repository on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Streams are one of the most powerful way to express data flow operations. And the way Node implemented them is great. I recommend you to spend some time &lt;a href=&quot;https://github.com/substack/stream-handbook&quot;&gt;Learning them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This boilerplate project uses &lt;a href=&quot;https://github.com/substack/shoe&quot;&gt;shoe&lt;/a&gt; to add a stream interface to a websocket so you can pipe other streams from/to.  It’s very simple but serves as an starting point.&lt;/p&gt;

&lt;p&gt;In the browser shoe is also used, and browserify is used to compile.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;clone the repository&lt;/li&gt;
  &lt;li&gt;Install dependencies (npm install)&lt;/li&gt;
  &lt;li&gt;node server ( to start the web server )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default it will run on port 9999&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the page from multiple browsers /devices&lt;/li&gt;
  &lt;li&gt;Write a message to broadcast it to the connected peers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The magic of Streams allows you to connect any stream in the server or the browser, so you could be streaming UI events / sensor data / etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/basic-realtime-boilerplate&quot;&gt;Check the repository on GitHub&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Streams concepts in Node (diagrams).</title>
   <link href="http://hugozap.github.com/development/2015/11/01/nodejs-streams-intro-diagrams"/>
   <updated>2015-11-01T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2015/11/01/nodejs-streams-intro-diagrams</id>
   <content type="html">
&lt;p&gt;&lt;img src=&quot;/img/streamsslides/intro.png&quot; alt=&quot;intro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In 2014 I presented a talk called “The Power of Streams in JS” for the BogotaJS meetup group.&lt;/p&gt;

&lt;p&gt;Recently I found the slides and realized that they may be useful for developers learning how streams work in node.&lt;/p&gt;

&lt;style&gt;
	img{border:none !important;}
&lt;/style&gt;

&lt;hr /&gt;

&lt;p&gt;Streams in node are great, quoting Dominic Tarr:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Streams in node are one of the rare occasions when doing something the fast way is actually easier. SO USE THEM. not since bash has streaming been introduced into a high level language as nicely as it is in node.” @dominictarr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/readable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Readable streams emit data generated from a data source&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/writeable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Writable streams are used to write chunks to a data source&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/transform.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Transform streams read and process chunks of data and emit them&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/duplex.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Duplex Streams have two “modes” they can act as writtable streams by receiving chunks and writing them to some datasource, and they can emit chunks of data read from another datasource.&lt;/p&gt;

&lt;p&gt;input and output are independent of each other.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/concat.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Concat streams read all the input chunks and create one  grouped chunk of data (e.g from a chunk of words concatenate into a String)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/filter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Filter streams work similar to .filter function for arrays. The only chunks that “pass” are the ones who satisfay some condition.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/split.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Split streams split a chunk of data using some separator.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/join.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A Join stream intersperse stream chunks with separators&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/linetoobject.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With trough/through2 you can easily create transform streams. In this example the stream receives an array (each chunk is an array) and transform it into a JSON object.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mux-demux&quot;&gt;Mux-Demux&lt;/h2&gt;

&lt;p&gt;Mux Demux is a technique that allows sending the data chunks of multiple (and different) streams over one channel and read them at the other side of the stream.&lt;/p&gt;

&lt;p&gt;In the diagram a sample websocket using the Shoe package is used as the ‘channel’ that will transport the data chunks from diverse streams.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/streamsslides/muxdemux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Polymer 1.0+ itemForElement example</title>
   <link href="http://hugozap.github.com/development/2015/10/18/polymer-itemforelement-example"/>
   <updated>2015-10-18T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2015/10/18/polymer-itemforelement-example</id>
   <content type="html">
&lt;p&gt;In Polymer sometimes you need to access the data item bound
to a DOM element inside a dom-repeat template. A common use case is when the user
interacts with the element (like click/hover) and you need to display additional properties
of the element.&lt;/p&gt;

&lt;p&gt;The way to do that is using the dom-repeat template method itemForElement.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/lofarabare/embed?html,output&quot;&gt;JS Bin on jsbin.com&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.min.js?3.35.0&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&quot;notes&quot;&gt;Notes:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Remember that the itemForElement method belongs to the dom-repeat template&lt;/li&gt;
  &lt;li&gt;If you need to use itemForElement for initialisation, make sure the template contents are already in the DOM. You can use the “dom-change” event that the template fires when it has updated the DOM.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Drag and drop with Polymer and InteractJS</title>
   <link href="http://hugozap.github.com/development/2015/10/13/polymer-interactjs"/>
   <updated>2015-10-13T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2015/10/13/polymer-interactjs</id>
   <content type="html">
&lt;p&gt;Need drag and drop with your Polymer (1+) elements?&lt;/p&gt;

&lt;p&gt;You can integrate &lt;a href=&quot;http://interactjs.io/&quot;&gt;InteractJS&lt;/a&gt;, a great library for handling drag/drop behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.com/polymer-practice/dist/interact-dragdrop1.html#!/polymer-practice/dist/interact-dragdrop1.html&quot;&gt;Checkout a demo here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Add interactjs to your proyect&lt;/li&gt;
  &lt;li&gt;Create a simple html file that will act as html import wrapper for interactjs&lt;/li&gt;
  &lt;li&gt;Setup the drop zones and draggables using InteractJS API&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installing-interactjs&quot;&gt;Installing InteractJS&lt;/h3&gt;

&lt;p&gt;With Bower&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bower install --save interactjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-wrapper-for-interact&quot;&gt;Create wrapper for Interact&lt;/h3&gt;

&lt;p&gt;Create an .html file ‘&lt;a href=&quot;https://github.com/hugozap/polymer-practice/blob/master/app/elements/interact-wrapper.html&quot;&gt;interact-wrapper.html&lt;/a&gt;’&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../bower_components/interact/dist/interact.min.js'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;create-reference-html-for-interactjs-dependency&quot;&gt;Create reference html for interactjs dependency.&lt;/h3&gt;

&lt;p&gt;The contents of this html will be only the script reference to the interactjs file, nothing else.&lt;/p&gt;

&lt;p&gt;In the example we have a Polymer element called GameBoard that allows cards to be dragged and dropped to the specific drop zones.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HERE IMAGE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Considerations:&lt;/p&gt;

&lt;h4 id=&quot;make-sure-to-setup-the-draggable-and-dropzones-when-the-dom-elements-are-there&quot;&gt;Make sure to setup the draggable and dropzones when the DOM elements are there.&lt;/h4&gt;

&lt;p&gt;If you use templates inside your component markup, don’t use the ready/attached event to directly setup your elements, because the elements may not be on the DOM yet. With dom-repeat templates use the event dom-change to be sure that the elements are present.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Setting up a linux server as torrent client</title>
   <link href="http://hugozap.github.com/software/2015/09/05/torrent-linux-server"/>
   <updated>2015-09-05T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2015/09/05/torrent-linux-server</id>
   <content type="html">
&lt;p&gt;I wanted to setup a linux server so it will download torrents to an external drive. I tested this on Mint, but it should work on Ubuntu and other distributions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install transmission-daemon.&lt;/p&gt;

    &lt;p&gt;apt-get install transmission-daemon&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After it’s installed it will run on port 9091 by default. You can change the port and other settings from the command line ( see transmission-daemon -help)&lt;/p&gt;

&lt;p&gt;** Important **&lt;/p&gt;

&lt;p&gt;For the changes to be applied properly, first stop the service with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service transmission-daemon stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After changing the settings start the service again&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service transmission-daemon start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Setup download dir&lt;/p&gt;

    &lt;p&gt;transmission-daemon –download-dir=/path/to/your/folder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add access to IP’s ( for Web admin )&lt;/p&gt;

    &lt;p&gt;transmission-daemon –allowed=IP HERE&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From your allowed computer go to&lt;/p&gt;

    &lt;p&gt;myserverip:9091&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything worked fine you should be able to access the web interface where you can manage your torrent downloads.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Tao and structure of programs</title>
   <link href="http://hugozap.github.com/development/2015/06/05/tao-and-structure"/>
   <updated>2015-06-05T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2015/06/05/tao-and-structure</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;p&gt;There once was a Master Programmer who wrote unstructured programs. A novice programmer, seeking to imitate him, also began to write unstructured programs. When the novice asked the Master to evaluate his progress, the Master criticized him for writing unstructured programs, saying, “What is appropriate for the Master is not appropriate for the novice. You must understand Tao before transcending structure.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mit.edu/~xela/tao.html&quot;&gt;Source: The Tao of Programming&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>More than a Tourist.</title>
   <link href="http://hugozap.github.com/life/2015/05/25/Gratitude"/>
   <updated>2015-05-25T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/life/2015/05/25/Gratitude</id>
   <content type="html">
&lt;p&gt;My time  in Chicago is coming to an end for now, i’ve been here for a few months and I’m really thankful for this experience, especially for the friends i leave here that I’m sure will see in the future.&lt;/p&gt;

&lt;p&gt;There’s a big difference between being a tourist doing only tourist things and immersing in the culture and forging meaningful relationships. This is not always easy, specially in popular destinations where local people are used to see tourists everyday. There is an “invisible wall” that creates a separation between the tourist and the locals. You want to get over that wall quickly and really connect with people.  This is also more difficult if you only travel with other people, I recommend everyone to go “solo” from time to time, is a totally different experience.&lt;/p&gt;

&lt;p&gt;I never imagined how great my time here was going to be and the wonderful people i’ll end up meeting. I never imagined that i would end up participating in Improvisation workshops with some well known Improv artists from Chicago. One year ago i wouldn’t even imagined it!, and now i’m much more curious about theater and performing arts and may try something related in the future.&lt;/p&gt;

&lt;p&gt;I feel gratitude because i was able to share the path with people from diverse backgrounds, with different aspirations and struggles. I’m a better person because of them and hopefully our interactions left something good in them.&lt;/p&gt;

&lt;p&gt;It’s a fresh start for me, but I’m excited about what’s coming.&lt;/p&gt;

&lt;p&gt;Thanks friends.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Happy Trees (SVG Art)</title>
   <link href="http://hugozap.github.com/graphics/2015/05/24/svg-trees"/>
   <updated>2015-05-24T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/graphics/2015/05/24/svg-trees</id>
   <content type="html">
&lt;p&gt;Some days ago on a rainy night i did some cool experiment generating trees using SVG and some animation utilities. This is the result.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.com/demos/art/svg/happytrees.html&quot;&gt;You can view the result here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using knockout es5 plugin with Browserify</title>
   <link href="http://hugozap.github.com/software/2015/01/21/knockout-es5-browserify"/>
   <updated>2015-01-21T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2015/01/21/knockout-es5-browserify</id>
   <content type="html">
&lt;p&gt;If you try using the knockout-es5 plugin with browserify you may run into some issues because of the way it detects commonjs system.&lt;/p&gt;

&lt;p&gt;While a proper module is published to npm, you can use this version of knockout-es5 that works with browserify.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/hugozap/1fdbd93094809cc7c691&quot;&gt;https://gist.github.com/hugozap/1fdbd93094809cc7c691&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;( This assumes you have knockout and weakmap dependencies installed)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Multiple data streams over just one socket with mux-demux and shoe (node)</title>
   <link href="http://hugozap.github.com/software/2014/12/21/shoe-mux-demux-example"/>
   <updated>2014-12-21T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2014/12/21/shoe-mux-demux-example</id>
   <content type="html">
&lt;p&gt;In a realtime app it’s common to have multiple data streams coming from the server. The mechanism to handle the different connections could include among others:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;frequent pooling to the server (possible perf issues if multiple requests are made at the same time)&lt;/li&gt;
  &lt;li&gt;one socket per data stream ( possible perf issues in server and client)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better alternative&lt;/p&gt;

&lt;p&gt;Multiple data streams but just one channel (1 web socket).&lt;/p&gt;

&lt;p&gt;This is what mux-demux refers to (multiplex-demultiplex), and can be very useful
for situations when having multiple transport channels (in this case sockets) is not practical.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/hugozap/shoe-reconnect-muxdemux-example/raw/master/muxdemux.png&quot; alt=&quot;Mux-demux&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-mux-demux&quot;&gt;How to use mux-demux?&lt;/h3&gt;

&lt;p&gt;To have a reference for future projects i created a minimal sample that demostrates how to send multiple data streams over one connection. The following modules are used:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/substack/shoe&quot;&gt;shoe&lt;/a&gt;: Creates a stream over a websocket so we can use the same streams Api we love.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/juliangruber/reconnect-core&quot;&gt;reconnect-core&lt;/a&gt; : Gives us the ability to execute a method everytime we need to reconnect to the server in case connection is lost.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dominictarr/mux-demux&quot;&gt;mux-demux&lt;/a&gt; : Inject multiple streams into another stream and extract them from the other side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/substack/browserify&quot;&gt;browserify&lt;/a&gt; : Use npm modules in the browser.&lt;/p&gt;

&lt;p&gt;The example consist of 9 streams that emit random numbers. We want to send those streams to the browser and display them in realtime.&lt;/p&gt;

&lt;p&gt;Animated gif:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/hugozap/shoe-reconnect-muxdemux-example/raw/master/sample.gif&quot; alt=&quot;example&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/shoe-reconnect-muxdemux-example&quot;&gt;Example repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The important part is here (index.js)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/hugozap/66576498c3af911fcc61.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;reconnection&quot;&gt;Reconnection.&lt;/h3&gt;

&lt;p&gt;If the server goes down, we need to reconnect. For this there is a module callled reconnect-core that we can use.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;https://github.com/hugozap/shoe-reconnect-muxdemux-example/blob/master/browser.js&quot;&gt;browser.js&lt;/a&gt; to see how to implement it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>BogotaJS talk - The power of streams in JavaScript</title>
   <link href="http://hugozap.github.com/software/2014/11/29/bogotajs-power-of-streams"/>
   <updated>2014-11-29T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2014/11/29/bogotajs-power-of-streams</id>
   <content type="html">
&lt;p&gt;Next Saturday i will be presenting about a topic i’m very interested in. Streams in JavaScript.&lt;/p&gt;

&lt;p&gt;It’s a great opportunity to share knowledge with the BogotaJS. Teaching has become very important for me , it’s a greaty way to master a topic of my preference and everytime i connect with some like minded people.&lt;/p&gt;

&lt;p&gt;I’ve been a little distant from the local communities, some years ago i was very active and gave some talks that people seemed to enjoy. I realized that talking in front of a knowledge-hungry audience is one of the things i enjoy the most. It scares me a little every time but i always learn new things.&lt;/p&gt;

&lt;p&gt;Where: Bogotá, Colombia
When : Saturday Dec 6th 2014.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Markdown para presentaciones.</title>
   <link href="http://hugozap.github.com/random/2014/11/27/presentacion-desde-markdown"/>
   <updated>2014-11-27T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/random/2014/11/27/presentacion-desde-markdown</id>
   <content type="html">
&lt;p&gt;Una herramienta para generar presentaciones a partir de archivos de markdown:&lt;/p&gt;

&lt;p&gt;Instalación:&lt;/p&gt;

&lt;p&gt;npm install -g slides-now-node&lt;/p&gt;

&lt;p&gt;( Requiere tener instalado node y npm )&lt;/p&gt;

&lt;p&gt;Uso:&lt;/p&gt;

&lt;p&gt;Lo primero es crear un archivo de markdown con la presentación&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Mi primer slide

- Bullet point 1
- Bullet point 2
- Bullet point 3

# Mi segundo slide

- Bullet point 1
- Bullet point 2
- Bullet point 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez guardado el archivo (slide.md) para generar
el html basta con&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;slides-now slide.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esto abre inmediátamente el navegador con la presentación.&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips:&lt;/h2&gt;

&lt;p&gt;Con la tecla “t” se puede cambiar el tema. Crear un nuevo tema es cuestión de modificar el css.&lt;/p&gt;

&lt;h2 id=&quot;referencia&quot;&gt;Referencia:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://glebbahmutov.com/slides-now/?url=README.md&quot;&gt;README.md del proyecto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bahmutov/slides-now-node&quot;&gt;Repo Git&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Es 2014 y trabajamos como tontos</title>
   <link href="http://hugozap.github.com/escritos/2014/11/06/trabajamos-como-tontos"/>
   <updated>2014-11-06T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/escritos/2014/11/06/trabajamos-como-tontos</id>
   <content type="html">
&lt;p&gt;¿Porqué seguimos trabajando 40 horas ( o más) a la semana?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tenemos herramientas que nos hacen 10 veces mas productivos en comparación con otras decadas.  ¿Porqué ese incremento en la productividad no se ve reflejado en aumento del tiempo dedicado a la familia, el descanso o cualquier actividad distinta al trabajo?&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;cuantas-horas-productivas-al-día-tiene-un-trabajador-del-conocimiento&quot;&gt;¿Cuantas horas productivas al día tiene un trabajador del conocimiento?&lt;/h2&gt;

&lt;p&gt;En los trabajos de conocimiento  (software, diseño, escritura, etc) hay un límite de horas en las cuales el cerebro funciona de manera óptima, seguir trabajando después de ese límite es
un desafío casi imposible como cualquier trabajador del conocimiento puede constatar, la mente
se dispersa como exigiendo descanso, los errores son comunes y la motivación disminuye.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exigir una cantidad de horas fijas a la semana no es trabajo inteligente&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si le exigimos a nuestros empleados 8 horas diarias de trabajo , le estamos lanzando un mensaje implícito:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No entiendo la naturaleza de tu trabajo&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Si nos detenémos a analizar la naturaleza de los trabajos del conocimiento, será facil darse cuenta de algunas cosas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hay una reserva de energía mental &lt;strong&gt;limitada&lt;/strong&gt; al día&lt;/li&gt;
  &lt;li&gt;Una tarea compleja puede drenar la energía del día en un par de horas&lt;/li&gt;
  &lt;li&gt;Una vez se agota esta energía, el trabajo mental es torpe y proclive a errores.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;factores-que-afectan-el-límite-mental-diario&quot;&gt;Factores que afectan el límite mental diario:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Complejidad de las tareas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Una tarea puede demandar concentración intensa por un par de horas , tras las cuales es inevitable sentir agotamiento. (Por ejemplo , analizar una secuencia de código en busca de un error)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cantidad de información que hay que mantener en la mente para resolver el problema.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es común para un programador tener que mantener una gran cantidad de información en la mente con el fin de combinarla, simular posibles caminos y pensar en soluciones a problemas complejos.&lt;/p&gt;

&lt;p&gt;A menos que uno se encuentre en lo que se llama “la zona”, es practicamente imposible mantener la concentración por un periodo extendido. Sería mejor ir a descansar y continuar al día siguiente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frecuencia de distracciones&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dilbert.com/strips/comic/1998-08-10/&quot; title=&quot;Dilbert.com&quot;&gt;(link relevante)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando el entorno facilita las interrupciones, sin darnos cuenta vamos consumiendo la cuota diaria de procesamiento mental que tenemos disponible. Es un problema en oficinas abiertas y la razón por la cual muchos programadores necesitan aislarse cuando se ven enfrentados a un desafío complejo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/&quot;&gt;Que pasa cuando interrumpe a sus programadores (link)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;si-confía-en-sus-trabajadores-permita-que-gestionen-su-energía-de-la-forma-que-prefieran&quot;&gt;Si confía en sus trabajadores permita que gestionen su energía de la forma que prefieran.&lt;/h2&gt;

&lt;p&gt;Hace décadas tenía sentido tener un horario fijo, en la revolución industrial era importante no romper la cadena de fabricación. Además había que maximizar la producción generada por las máquinas mientras estas estuvieran en operación. Hoy ya no tenemos máquinas pero seguimos asistiendo a la oficina como si ahí estuvieran.&lt;/p&gt;

&lt;h2 id=&quot;trabajar-cuatro-horas-aparentar-estar-ocupado-las-otras-cuatro&quot;&gt;Trabajar cuatro horas, aparentar estar ocupado las otras cuatro.&lt;/h2&gt;

&lt;p&gt;Ese es el juego destructivo que empiezan a jugar empresas y empleados. 
Un empleado que haga un esfuerzo mental intenso para resolver un problema importante probablemente invierta 3 o 4 horas tras las cuales se sentirá agotado. Si la empresa no tiene una cultura de trabajo inteligente, este trabajador del conocimiento buscará la forma de aparentar que trabaja las otras cuatro, solo con el fin de cumplir sus 8 horas.&lt;/p&gt;

&lt;p&gt;Es un escenario lamentable.  Si dicho trabajador pudiera irse a descansar , al día siguiente continuaría estando en condiciones de resolver problemas importantes. La empresa gana pues el trabajo generado es de mejor calidad y el empleado gana pues tiene un equilibrio vital.&lt;/p&gt;

&lt;h2 id=&quot;el-horario-fijo-premia-la-mediocridad&quot;&gt;El horario fijo premia la mediocridad.&lt;/h2&gt;

&lt;p&gt;¿Como puede ser esto?&lt;/p&gt;

&lt;p&gt;Es muy facil, supongamos que tenemos 2 empleados llamados AA y BB. El empleado AA es muy eficiente y dedicado, sin embargo BB no lo es. En una empresa sin cultura del trabajo inteligente ocurre lo siguiente:&lt;/p&gt;

&lt;p&gt;AA recibe sus tareas y con prontitud se dispone a trabajar en ellas, en su mente ingenua, piensa que la efectividad es valorada. Después de haber decidido cual tarea es la mas importante para su empresa, se dispone a terminarla, y así, una tras otra. El agotamiento se manifiesta y aunque el ánimo de AA ha decaido , este termina sus tareas incluso antes de lo previsto.&lt;/p&gt;

&lt;p&gt;Por otro lado BB no tiene mucho interés en ser eficiente, e internamente se burla de AA, pues sabe que lo único que AA conseguirá por su gran esfuerzo es… mas trabajo. Por esa razón BB realiza su mínimo esfuerzo y aunque no logrará ser reconocido como el mas eficiente, al menos no se desgastará.&lt;/p&gt;

&lt;p&gt;Después de un tiempo AA con algo de desilución se da cuenta de cuales son las reglas del juego y se cuestiona si tal vez sea mejor no aportar tanto. Siente deseos de hacer un buen trabajo pero no a costa de su propia calidad de vida.&lt;/p&gt;

&lt;h2 id=&quot;en-resumen&quot;&gt;En resumen.&lt;/h2&gt;

&lt;p&gt;No tengo la fórmula mágica para que trabajemos de forma inteligente, pero estoy casi seguro que es muy diferente a como la mayoría de empresas lo hacen.&lt;/p&gt;

&lt;p&gt;Hay algunos puntos de partida:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entender la naturaleza del trabajo que hacen sus empleados&lt;/li&gt;
  &lt;li&gt;Entienda &lt;a href=&quot;http://www.daedtech.com/programmers-teach-non-geeks-the-true-cost-of-interruptions&quot;&gt;El verdadero costo de las interrupciones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Entienda que hay “night owls” e “Early birds” y permita que seleccionen sus horarios de trabajo, ellos saben mejor que usted cuando son mas productivos.&lt;/li&gt;
  &lt;li&gt;Confíe en sus empleados, permítales manejar sus reservas de energía mental ( Si no confía en ellos igual va a fracasar por otros motivos).&lt;/li&gt;
  &lt;li&gt;Entienda que el concepto de las 40 horas fue creado en un contexto y época diferente.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>(Work Log) Creating the villain sprite for my game</title>
   <link href="http://hugozap.github.com/gamedev/2014/07/02/viperine-professor"/>
   <updated>2014-07-02T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/gamedev/2014/07/02/viperine-professor</id>
   <content type="html">
&lt;p&gt;Finishing the villain of my game, he is called “the viperine professor”
and will laugh if you fail to score.&lt;/p&gt;

&lt;p&gt;Creating art is cool.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://imgur.com/OPHe4Tz&quot;&gt;&lt;img src=&quot;http://i.imgur.com/OPHe4Tz.png&quot; title=&quot;Hosted by imgur.com&quot; /&gt; &lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(Work log) Interactive story app builder</title>
   <link href="http://hugozap.github.com/life/2014/06/24/interactive-story-builder"/>
   <updated>2014-06-24T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/life/2014/06/24/interactive-story-builder</id>
   <content type="html">
&lt;p&gt;There is a lot of opportunities to use mobile for rich interactive stories,
one of the problems authors face is that creating those apps requires a large investment that is not easy to recover with the app sales.&lt;/p&gt;

&lt;p&gt;I’m working in a product that makes it easier and cheaper for authors to create
the app with a nice GUI, and package it as a mobile app.  I have a basic prototype and is nice to be able to create basic interactions without having to code.&lt;/p&gt;

&lt;p&gt;One great thing of text based adventure games is that you have to use your imagination more, i plan to have a mix of visuals / text so you still use your imagination but with some visuals / audio to enrich the atmosphere.&lt;/p&gt;

&lt;p&gt;This is a preview&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/98593088&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://vimeo.com/98593088&quot;&gt;AppsCo Demo Saving a friend&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/user6141785&quot;&gt;Hugo Zapata&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m looking into funding options, so i can work on this platform full time. 
I see a lot of potential and a lot of authors would benefit from this platform.&lt;/p&gt;

&lt;p&gt;My roadmap to ship it is:&lt;/p&gt;

&lt;p&gt;1) Look for funding while working part time 
2) Finishing version 0.1 with a minimal but useful set of features
3) Invite some author(s) to give it a try to get feedback and iterate
4) Keep improving it, add more people to the team and release a v1&lt;/p&gt;

&lt;p&gt;If you are interested in following the process you can follow me on twitter 
or send me an email.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(Work log) Mini game for kids app</title>
   <link href="http://hugozap.github.com/life/2014/06/05/work-log-minigame-proto"/>
   <updated>2014-06-05T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/life/2014/06/05/work-log-minigame-proto</id>
   <content type="html">
&lt;p&gt;I’m working on a mini-game that will be part of a kid app for Ipad&lt;/p&gt;

&lt;p&gt;so far i’m happy with the result, feels relaxing.&lt;/p&gt;

&lt;video controls=&quot;controls&quot; width=&quot;800&quot; height=&quot;600&quot; name=&quot;[Prototype] mini game&quot; src=&quot;http://www.hugozap.com/img/minigameproto.mov&quot;&gt;&lt;/video&gt;

</content>
 </entry>
 
 <entry>
   <title>Focus effect with CoronaSDK</title>
   <link href="http://hugozap.github.com/gamedev/2014/03/22/coronasdk-focus-effect"/>
   <updated>2014-03-22T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/gamedev/2014/03/22/coronasdk-focus-effect</id>
   <content type="html">
&lt;p&gt;A simple effect created with CoronaSDK. This could be useful
for sniper type games or to draw attention to certain region of
the app.&lt;/p&gt;

&lt;p&gt;Estimated time to implement: 20 mins&lt;/p&gt;

&lt;h2 id=&quot;github-code&quot;&gt;GitHub Code:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/CoronaFocusDemo&quot;&gt;https://github.com/hugozap/CoronaFocusDemo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo:&lt;/h2&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/h0p5KMawf70&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>(Learn log) Use multiple ssh keys with git</title>
   <link href="http://hugozap.github.com/software/2014/03/16/git-multiple-ssh-keys"/>
   <updated>2014-03-16T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2014/03/16/git-multiple-ssh-keys</id>
   <content type="html">
&lt;p&gt;I needed to create multiple ssh keys with github/ bitbucket accounts.&lt;/p&gt;

&lt;p&gt;The steps i followed :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create ~/.ssh/config file&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate multiple identities (one for bitbucketwork, one for bitbucketpersonal)&lt;/p&gt;

    &lt;p&gt;ssh-keygen -f ~/.ssh/bitbucketwork -C “bitbucketwork”
 repeat for bitbucketpersonal&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a host entry for each identity&lt;/p&gt;

    &lt;p&gt;Host bitbucketwork
  HostName bitbucket.org
  IdentityFile ~/.ssh/workdid
 Host bitbucketpersonal
  HostName bitbucket.org
  IdentityFile ~/.ssh/personalid&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Change the git remote to use the correct alias of your identity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, i have a work repository, to make git use the work identity&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Before:

git@bitbucket.org:accountname/reponame.git

After:
git@bitbucketwork:accountname/reponame.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where bitbucketwork is one of the Host alias previously created&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Paste the public key in the bitbucket settings&lt;/p&gt;

    &lt;p&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the key(s) to the ssh agent with :&lt;/p&gt;

    &lt;p&gt;ssh-add ~/.ssh/work&lt;/p&gt;

    &lt;p&gt;( Note: Add to .bash_profile, otherwise you will  have to add the key everytime you open a terminal )&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;[https://gist.github.com/jexchan/2351996]
[https://confluence.atlassian.com/pages/viewpage.action?pageId=271943168]&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>KnockoutJS bindings for Bootstrap Date and time pickers.</title>
   <link href="http://hugozap.github.com/software/2014/01/11/knockoutjs-bootstrap-datepicker-custom-binding"/>
   <updated>2014-01-11T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2014/01/11/knockoutjs-bootstrap-datepicker-custom-binding</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://github.com/hugozap/knockoutjs-date-bindings&quot;&gt;Link to GitHub repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.com/demos/knockoutDateBinding/index.html&quot;&gt;Live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Custom bindings in knockout are really cool, they allow us to create components that can be easily re used with the familiar data-bind syntax.&lt;/p&gt;

&lt;p&gt;If we have a form for date/time input we have to set up the components to display date and time selectors. Without custom bindings we have to initialize the date/time pickers and know their specific API’s so we can attach and event listener to their respective ‘change’ event and update the viewmodel observable. This is not ideal.&lt;/p&gt;

&lt;p&gt;With custom bindings we just use the html attributes that knockout uses to configure the binding:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;text&quot; data-bind=&quot;dateValue:birthday,format='MM/DD/YYY'&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Include the ko.dateBindings.js file in your html.
Remember to also include the bootstrap date or time picker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Datete picker binding:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;text&quot; data-bind=&quot;dateValue:birthday&quot;/&amp;gt;
&amp;lt;input type=&quot;text&quot; data-bind=&quot;dateValue:birthday,format='MM/DD/YYY'&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Time picker binding:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;input type=&quot;text&quot; data-bind=&quot;timeValue:birthday&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Sylvia's super awesome maker show</title>
   <link href="http://hugozap.github.com/creativity/2013/12/08/super-awesome-sylvia"/>
   <updated>2013-12-08T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/creativity/2013/12/08/super-awesome-sylvia</id>
   <content type="html">
&lt;p&gt;Today i discovered &lt;a href=&quot;http://sylviashow.com/&quot;&gt;Sylvia’s super awesome maker show&lt;/a&gt; and it’s fantastic!.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/lT_p7xx6Qv0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;I think is a great example of good parenting. 
Kids are much more capable than we think, they have lots of energy and can grasp concepts really quickly.&lt;/p&gt;

&lt;p&gt;Most schools are not ideal to make the most of their creative potential, fortunately in this time there are lots of resources for kids to experiment play and harness their creative habilities.&lt;/p&gt;

&lt;p&gt;Insted of wasting hours in front of a tv, motivate your children
to create cool new things.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Programmers and Beekeeping</title>
   <link href="http://hugozap.github.com/life/2013/11/30/programmers-beekeping"/>
   <updated>2013-11-30T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/life/2013/11/30/programmers-beekeping</id>
   <content type="html">
&lt;p&gt;This is a fragment of an interesting read that appeared the other day
on /r/programming.&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&quot;http://www.cs.cmu.edu/~chuck/jokepg/joke_19970213_01.txt&quot;&gt;How Software Companies Die by Orson Scott Card&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##Beekeeping&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here’s the secret that every successful software company is based on:
You can domesticate programmers the way beekeepers tame bees. You
can’t exactly communicate with them, but you can get them to swarm in
one place and when they’re not looking, you can carry off the honey.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You keep these bees from stinging by paying them money. More money
than they know what to do with.  But that’s less than you might think.
You see, all these programmers keep hearing their fathers’ voices in
their heads saying “When are you going to join the real world?” All
you have to pay them is enough money that they can answer (also in
their heads) “Jeez, Dad, I’m making more than you.” On average, this
is cheap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;And you get them to stay in the hive by giving them other coders to
swarm with. The only person whose praise matters is another
programmer. Less-talented programmers will idolize them; evenly
matched ones will challenge and goad one another; and if you want to
get a good swarm, you make sure that you have at least one certified
genius coder that they can all look up to, even if he glances at other&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;source: &lt;a href=&quot;http://www.cs.cmu.edu/~chuck/jokepg/joke_19970213_01.txt&quot;&gt;How Software Companies Die by Orson Scott Card&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dimensions</title>
   <link href="http://hugozap.github.com/life/2013/11/18/dimensions"/>
   <updated>2013-11-18T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/life/2013/11/18/dimensions</id>
   <content type="html">
&lt;p&gt;Go home. You’re young.
And still have much to unlearn.&lt;/p&gt;

&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/tf3oHCWMIjE?list=PLzvRx_johoA_Zhuo_pRsWSbARe2IZ2XZJ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>Own your data and make the web creative again.</title>
   <link href="http://hugozap.github.com/internet/2013/10/30/own-your-data"/>
   <updated>2013-10-30T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/internet/2013/10/30/own-your-data</id>
   <content type="html">
&lt;p&gt;I really liked the Amber Case talk at Realtime Conf 2013. She made me think about the ownership of my data but not in the legal way, but more about the good feeling it brings to know that we own and control our content.&lt;/p&gt;

&lt;p&gt;Some points  worth considering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our content is at mercy of company acquisitions.&lt;/li&gt;
  &lt;li&gt;Complex setups (blog systems, databases) make it harder to preserve the contents. Simplicity (simple html files, markdown, etc) are actually more meaningful and don’t require anything to communicate the content.&lt;/li&gt;
  &lt;li&gt;In the beggining of internet most people were creators, now almost everybody just consumes content.&lt;/li&gt;
  &lt;li&gt;Because most people are just consumers, the web has shaped to a distraction artifact instead of something that promotes creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;where-is-the-fun&quot;&gt;Where is the fun?&lt;/h2&gt;

&lt;p&gt;As she mentions, i remember having a lot of fun building things in the beggining of internet, it was awesome to make something in microsoft frontpage / notepad/ whatever. I’m guilty of the rotating skull gifs thing but there was a sense of discovery and satisfaction, i don’t know why it is not present anymore.&lt;/p&gt;

&lt;p&gt;Maybe it’s because at the time nobody had expectations of how things had to look, so creators had freedom to do whatever they felt it was great, almost everybody i knew through IRC had some kind of random website, irc bot and basic design skills. But now, it feels more like TV, so passive, the rate of creators/consumers may be something like 1/100.&lt;/p&gt;

&lt;h2 id=&quot;ownership-of-data-promotes-creation&quot;&gt;Ownership of data promotes creation.&lt;/h2&gt;

&lt;p&gt;I realized that when people have some kind of space that allows them to create content and present it the way they want , it just promotes the creative spark. I feel sad when i see a teenager spending lots of time trying to adapt facebook, changing cover pictures frequently, and posting links to express himself. It’s sad because all the creative energy is there but Facebook is so bad for creation that the person ends up limiting himself. Maybe if he had some blog to maintain, change colors, change the html, upload his pictures to his server and fiddling with some technical details he would really feel ownership of his content.&lt;/p&gt;

&lt;p&gt;Here is the talk:&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/77352414&quot; width=&quot;500&quot; height=&quot;281&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>Minimal coin syntethizer</title>
   <link href="http://hugozap.github.com/software/2013/10/30/coin-synth"/>
   <updated>2013-10-30T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2013/10/30/coin-synth</id>
   <content type="html">
&lt;p&gt;Analog interfaces are cool, i can’t explain why but touching things with
different textures is cooler than always using a touchscreen, at least 
for now that touchscreens don’t have texture changing capabilities.&lt;/p&gt;

&lt;p&gt;Last weekend i worked on a little project that uses coins as touch
surface to play some cool sound effects. The result is this:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/xNvLyb8GXug&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;This was possible with the makey makey and a little node script to map keys to the sounds.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Google glass possibilities (1)</title>
   <link href="http://hugozap.github.com/development/2013/05/09/google-glass-deaf-people"/>
   <updated>2013-05-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2013/05/09/google-glass-deaf-people</id>
   <content type="html">
&lt;h1 id=&quot;a-simple-yet-very-useful-google-glass-application-for-deaf-people&quot;&gt;A simple yet very useful Google glass application for deaf people.&lt;/h1&gt;

&lt;p&gt;A lot of things have been said about  Google Glass, people make jokes about it, and a lot of hype is about being creepy, looking ridiculous, etc.&lt;/p&gt;

&lt;p&gt;This sounds familiar, the same story happened with the IPad , people made jokes, upload funny pictures, and &lt;a href=&quot;https://www.google.com/webhp?sa=N&amp;amp;hl=en&amp;amp;tab=lw#sclient=psy&amp;amp;hl=en&amp;amp;safe=off&amp;amp;site=webhp&amp;amp;q=%22ipad+will+fail%22&amp;amp;aq=f&amp;amp;aqi=&amp;amp;aql=&amp;amp;oq=&amp;amp;gs_rfai=&amp;amp;pbx=1&amp;amp;fp=1&amp;amp;bav=on.2,or.r_cp.r_qf.&amp;amp;cad=b&quot;&gt;failed predictions were abundant&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;I see a lot of possibilities with this kind of technologies. Google glass is part of the first iteration of products, and they will have flaws but will eventually be polished.&lt;/p&gt;

&lt;h2 id=&quot;ambient-sounds-to-text-with-google-glass&quot;&gt;Ambient sounds to text with Google Glass.&lt;/h2&gt;

&lt;p&gt;What if you are deaf and with some software and a mic, you could see the text that was converted from the ambient sounds. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/glass1.png&quot; alt=&quot;glass1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With a powerful sound to text engine, this could improve the quality of life of deaf people. They would not need to read lips, and would be able to “listen” if someone behind them called them, someone shouts, an emergency alarm is triggered, etc.&lt;/p&gt;

&lt;p&gt;I’m really excited about the possibilities of this technology. People with dissabilities are a niche that could be possitively affected by this. Let’s hope an innovative ecosystem develops around this.&lt;/p&gt;

&lt;p&gt;Original image by &lt;a href=&quot;http://www.flickr.com/photos/zebarnabe/7122425917/&quot;&gt;zebarnabe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thenounproject.com/noun/speaker/#icon-No4106&quot; target=&quot;_blank&quot;&gt;Speaker&lt;/a&gt;
designed by 
&lt;a href=&quot;http://thenounproject.com/squintongreen&quot; target=&quot;_blank&quot;&gt;Samuel Q. Green&lt;/a&gt;
from The Noun Project&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Moving a VMWare Windows 7 virtual machine to VirtualBox in Mac</title>
   <link href="http://hugozap.github.com/development/2013/02/10/win7-virtual-machine-mac"/>
   <updated>2013-02-10T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2013/02/10/win7-virtual-machine-mac</id>
   <content type="html">
&lt;p&gt;I’m very happy developing with my MacBook Air, even for heavy tasks like running the android emulator it works really well, i guess the solid state disk has a lot to do with it, i have a Windows 7 virtual machine with all the settings for .NET development, i wanted to try it in my mac .&lt;/p&gt;

&lt;p&gt;The first thing i tried was looking for VMWare player for Mac but it doesn’t exist so i tried with VirtualBox.&lt;/p&gt;

&lt;h2 id=&quot;using-the-virtual-hard-drive&quot;&gt;Using the virtual hard drive.&lt;/h2&gt;

&lt;p&gt;In Virtual Box i started creating a new virtual machine and adding the .vmdk file that i copied from the VMWare virtual machine, this file has the hard drive contents.&lt;/p&gt;

&lt;h2 id=&quot;solving-boot-errors&quot;&gt;Solving boot errors&lt;/h2&gt;

&lt;p&gt;When i started the virtual machine in Virtual Box i got some boot errors and a blue screen, i spent some time and finally i could solve them doing the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Settings -&amp;gt; System: Activate the “Enable IO APIC” option&lt;/li&gt;
  &lt;li&gt;Settings -&amp;gt; Storage: Use a SAS Controller instead of SCSI or IDE&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I deleted the default controller and added a SAS Controller for the hard drive. I’m not sure why this works but after doing that the Win7 machine started ok.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>(Android) Build your application and upload the .apk to an ftp server with a bash script</title>
   <link href="http://hugozap.github.com/development/2013/01/23/build-android-apk-and-uploadftp"/>
   <updated>2013-01-23T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2013/01/23/build-android-apk-and-uploadftp</id>
   <content type="html">
&lt;p&gt;For the build process of a medium size project i’m working on, i need to generate the .apk and upload it to an ftp, i was doing this manually everytime i made changes, this is not optimal so i decided to create a bash script to automate the process.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-eclipse-project-for-ant-build&quot;&gt;Preparing the eclipse project for ant build.&lt;/h3&gt;

&lt;p&gt;To compile from the command line the build.xml file must created , the following command does that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android update -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can call&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ant debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To generate the .apk file inside the bin directory of your project. I needed to sign the .apk so instead of debug , release ant task must be called&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ant release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Specifying the key store for apk signing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My final goal is to upload the signed .apk to an ftp server, where other part of the build process takes place, to sign the .apk you must already have created a key store and alias that you can set in the file “ant.properties” (Create it in the root of your project)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key.store=/path/to/keystore
key.alias=alias name
key.store.password=YOUR_PASSWORD
key.alias.password=YOUR_PASSWORD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take care when storing passwords in plain text, you can add ant.properties to your .gitignore if you dont want it in your repository.&lt;/p&gt;

&lt;h3 id=&quot;uploading-a-file-to-ftp-from-a-bash-script&quot;&gt;Uploading a file to ftp from a bash script.&lt;/h3&gt;

&lt;p&gt;I tried with the &lt;strong&gt;ftp&lt;/strong&gt; command , however it wasn’t as straight as i tought.  The ftp command is not really meant to be used from the command line. A better alternative exists and is called &lt;a href=&quot;http://www.ncftp.com/ncftp/&quot;&gt;ncftp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(In mac install it with &lt;strong&gt;brew install ncftp&lt;/strong&gt; if you have brew package manager)&lt;/p&gt;

&lt;p&gt;The command to upload a file is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncftpput -m -u $USER -p $PASS $SERVER $REMOTEDIR $TARGETFILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-result&quot;&gt;The result&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/4614108.js&quot;&gt;/** comment required for jekyll bug*/&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>NodeJS testing with Mocha and Should</title>
   <link href="http://hugozap.github.com/development/2013/01/16/nodejs-testing-with-mocha-and-should"/>
   <updated>2013-01-16T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2013/01/16/nodejs-testing-with-mocha-and-should</id>
   <content type="html">
&lt;p&gt;There are a lot of frameworks to include tests in your projects, one popular choice is Mocha and the Should package for the assertion syntax.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://visionmedia.github.com/mocha/&quot;&gt;Mocha&lt;/a&gt;
&lt;a href=&quot;https://github.com/visionmedia/should.js&quot;&gt;Should&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;npm install -g mocha
npm install should&lt;/p&gt;

&lt;p&gt;(-g flag used to install mocha globally so it will be possible to use the mocha executable from anywhere)&lt;/p&gt;

&lt;h2 id=&quot;assertions-with-should&quot;&gt;Assertions with Should.&lt;/h2&gt;

&lt;p&gt;Should is a NodeJS module that makes it easy to declare assertions in a kind of natural language. It will throw an exception if the code does not comply with them.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4	552618.js?file=should_syntax.js&quot;&gt;//jekyllfix &lt;/script&gt;

&lt;p&gt;Check the should.js documentation or source for all the features.&lt;/p&gt;

&lt;h2 id=&quot;using-mocha-and-should&quot;&gt;Using Mocha and Should&lt;/h2&gt;

&lt;p&gt;In the following snippet a fake Validator component
will be tested&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4552618.js?file=mocha_test.js&quot;&gt;//jekyllfix &lt;/script&gt;

&lt;h2 id=&quot;running-the-tests-with-mocha-executable&quot;&gt;Running the tests with mocha executable&lt;/h2&gt;

&lt;p&gt;If you invoke mocha from the command line, it will search for a file called tests.js or a directory called tests. You can also specify the name of the test file as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mocha mytestfile.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Presenting the results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mocha has a parameter called ‘reporter’ that allows to get the results in different formats. To list all the avalaible reporters use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mocha --reporters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Using the spec reporter&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mocha -R spec mochatest.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will get the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mocha1.png&quot; alt=&quot;Mocha results&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>NodeJS cool utils (Minimatch, Glob)</title>
   <link href="http://hugozap.github.com/development/2012/12/30/nodejs-minimatch-glob"/>
   <updated>2012-12-30T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2012/12/30/nodejs-minimatch-glob</id>
   <content type="html">
&lt;p&gt;In my quest to learn nodejs i like to navigate github and randomly looking at popular nodejs repositories to see it’s tests and what problem it solves.&lt;/p&gt;

&lt;p&gt;I was looking at Isaac Schlueter repositories ( he is the main developer of nodejs right now).
His github account is &lt;a href=&quot;https://github.com/isaacs/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;minimatch&quot;&gt;Minimatch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;Minimatch&lt;/a&gt; is a minimal pattern matching library
It’s useful when you want a quick match and don’t want to write regular expressions directly&lt;/p&gt;

&lt;p&gt;Eg.&lt;/p&gt;

&lt;p&gt;Matching javascript files:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4416811.js?file=gistfile1.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Matching paths that end with /bin&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4416811.js?file=gistfile3.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;##Glob&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/isaacs/node-glob&quot;&gt;Glob&lt;/a&gt; is related to minimatch but navigates de filesystem and returns a list of paths that
match a minimatch expression. This is great to find a list of files or directory paths that match a given expression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The globbing concept in bash&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The concept of globbing is part of bash and this allows you to use some kind of filters to find files based on their path(where you cannot/don’t want to use regex directly)&lt;/p&gt;

&lt;p&gt;For example if you want to find all the files that start with importantFileV and have xml extension you can use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l importantFileV?.xml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would return the following results&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;importantFileV1.xml, importantFileV2.xml, importantFileV3.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some cool things you can do with globbing&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find all files that start with  the word important&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l important* 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Find all files that have version 1 to 5&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l importantFileV\[1-5].js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Find all the files that don’t have the word test in them&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ls -l [^test]*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Globbing in nodejs&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4416811.js?file=gistfile2.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;I’m using my blog for documenting my learning process, i hope someone finds this useful too.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>5 Shortcuts that you must absolutely know in Eclipse and Visual Studio</title>
   <link href="http://hugozap.github.com/development/2012/07/10/5-eclipse-shortcuts"/>
   <updated>2012-07-10T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/development/2012/07/10/5-eclipse-shortcuts</id>
   <content type="html">
&lt;p&gt;There are many shortcuts to learn but if you want to improve your productivity you must be able to quickly do the following tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quickly open a class by typing a part of its name&lt;/li&gt;
  &lt;li&gt;Quickly add a namespace import/using statement without moving to the header of the file&lt;/li&gt;
  &lt;li&gt;Duplicate a line&lt;/li&gt;
  &lt;li&gt;Go to a method quickly&lt;/li&gt;
  &lt;li&gt;Navigate to the class/method definition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is that you don’t use your mouse , go to menu items etc.. This generates micro distractions that summed up affect your productivity.&lt;/p&gt;

&lt;h2 id=&quot;in-eclipse&quot;&gt;In Eclipse&lt;/h2&gt;

&lt;h3 id=&quot;quickly-open-a-class-by-typing-a-part-of-its-name&quot;&gt;Quickly open a class by typing a part of its name:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  Ctrl+Shift+T ### Quickly add a namespace import/using statement without moving to the header of the file: 
Control+1 when the caret is on the type that needs an import. Control+1 is very useful for other contextual actions too ### Duplicate a line:
 Control+ALT+DownArrow ### Go to a method quickly: 
Control+O and begin typing the name of the method  ### Navigate to the class/method definition
 F3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-visual-studio&quot;&gt;In Visual Studio&lt;/h2&gt;

&lt;h3 id=&quot;quickly-open-a-class-or-any-file-by-typing-a-part-of-its-name-&quot;&gt;Quickly open a class (Or any file) by typing a part of its name :&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I use the extension called Sonic File Finder, there are other ways too
* Install the extension http://www.jens-schaller.de/sonictools/sonicfilefinder/index.
* Press Control+Shift+Y to open the search panel and begin typing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;quickly-add-a-namespace-importusing-statement-without-moving-to-the-header-of-the-file&quot;&gt;Quickly add a namespace import/using statement without moving to the header of the file:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Alt+Shift+F10 opens the quick actions panel with contextual actions , one of them adds required using statements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;duplicate-a-line&quot;&gt;Duplicate a line:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I recently discovered that Visual Studio indeed has duplicate line shortcut, however it appears few people know about it
The shortcut:
    Without any selected text press Ctrl+C Control+V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;go-to-a-method-quickly&quot;&gt;Go to a method quickly:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This works to find any word quickly, you need to install the Visual Studio Productivity Power Tools and just by typing Control+F you can see the results of your search as you type.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;navigate-to-the-classmethod-definition&quot;&gt;Navigate to the class/method definition&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;F12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I find myself using this shortcuts constantly when developing for Android and .NET (Mostly ASP MVC Web Apps)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Shell script to prompt for parameters and start Cloud9 IDE in a different directory and port</title>
   <link href="http://hugozap.github.com/software/2012/05/14/cloud9-start-script"/>
   <updated>2012-05-14T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2012/05/14/cloud9-start-script</id>
   <content type="html">&lt;p&gt;I was playing with node.js in linux and wanted to try a js IDE (In Windows i use Notepad++ for web coding (With a lot of snippets)). i read something about Cloud9 some time ago but didn’t pay too much attention thinking it was a cool IDE only avalaible online. I was wrong, you can download it and install it locally so i gave it a try.&lt;/p&gt;

&lt;p&gt;You can check the steps to install it &lt;a href=&quot;http://www.cambus.net/setting-up-a-node-js-development-environment-with-npm-and-cloud9-ide-installed-locally/&quot;&gt;here:&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-bash-script-that-allows-workspace-selection-and-automatically-start-the-default-browser&quot;&gt;Creating a bash script that allows workspace selection and automatically start the default browser&lt;/h2&gt;
&lt;p&gt;I was looking for some way to start cloud9 in the folder i chose, and launch the default web browser to the Cloud9 local installation.&lt;/p&gt;

&lt;p&gt;By following the steps in &lt;a href=&quot;http://ubuntuforums.org/showthread.php?t=1813076&quot;&gt;this forum post&lt;/a&gt; i was able to create a shell script that asks for a folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(I installed node with sudo so i needed to provide the password. I modified the script to capture it.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(with the  xdg-open command is possible to launch the default web browser.)&lt;/p&gt;

&lt;p&gt;The final script (make sure you have zenity installed, it’s required for the dialogs)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PROJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;zenity &lt;span class=&quot;nt&quot;&gt;--file-selection&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--directory&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--title&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Select a Project Directory'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;zenity &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--title&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sudo password'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/cloud9/bin/cloud9.sh &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3000 &amp;amp;
  &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3
   xdg-open http://localhost:3000
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##Some notes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zenity is the linux tool used to display a prompt window and capture parameters for shell scripts&lt;/li&gt;
  &lt;li&gt;The first two lines display dialogs to capture the parameters&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;This line: echo ${PASS}&lt;/td&gt;
          &lt;td&gt;sudo -S $HOME/cloud9/bin/cloud9.sh -w “${PROJECT}” -p 3000 &amp;amp;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;ul&gt;
      &lt;li&gt;Sends the password parameter to the sudo command (-S is used to capture stdin )&lt;/li&gt;
      &lt;li&gt;The cloud9 launcher accepts -w (for setting parameter) and -p (changing the port)&lt;/li&gt;
      &lt;li&gt;The last character of the line &amp;amp; allows the script to execute the following command (open the browser) at the same time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sleep 3  is need so the browser opens when the cloud9 app is already initialized.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I love linux versatility and learning about the command line. With good IDE’s like Cloud9 that cost zero, there is no excuse to release cool products&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Sending and receiving dates from android/java/dotnet the easy way</title>
   <link href="http://hugozap.github.com/software/2012/04/09/unixtimestamps1"/>
   <updated>2012-04-09T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2012/04/09/unixtimestamps1</id>
   <content type="html">
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Date serializing is not as easy as it sounds. If you are using JSON is possible that you will encounter problems with formats, time zone representation, etc.&lt;/p&gt;

&lt;p&gt;If you need to send and receive dates from the server to android you have to take this issues into account&lt;/p&gt;

&lt;p&gt;Besides that, there is the timezone architecture decision. How will you store your dates?. Will you store everything in UTC? (I prefer this) or will you store the date and have separate columns to store timezone information ( works too but makes date handling more difficult ).&lt;/p&gt;

&lt;h2 id=&quot;differences-in-parsers-and-formatters&quot;&gt;Differences in parsers and formatters&lt;/h2&gt;

&lt;p&gt;I’m working on  a mobile application (Android) that sends and receives data from a .NET Backend.
At first i chose ISO Format to send and receive dates. Everything is stored as UTC and only converted to local time to display information to the user.&lt;/p&gt;

&lt;p&gt;One problem i faced was that one part was sending the Z character and the other part didn’t understand it. I checked the format strings and everything appeared ok.
After a little googling, i noticed that some APIs used unixtime format and i realized that this is the simplest way to handle it. And i like simplicity.&lt;/p&gt;

&lt;h3 id=&quot;working-with-unix-time-stamps-in-android-java&quot;&gt;Working with unix time stamps in android (java)&lt;/h3&gt;
&lt;p&gt;I decided to store the dates as unix time stamps and forget about date handling in sqlite, java, json, .net ( a lot of potential errors ). 
Dates will be sent and received as long values (no json hacks) and i had to have a way to convert those values to the native Date type in the server and client&lt;/p&gt;

&lt;p&gt;(note: I use Gson as the Json serializar)&lt;/p&gt;

&lt;p&gt;In java i have the following method utilities&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toUnixTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FromUnixTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;	
		&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unix_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With Gson one can create custom serializers/deserializers, that’s what we want to send and receive the date as a number:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnixTimeSerializer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeOfSrc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonSerializationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;JsonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnull&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jnull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonPrimitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUnixTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnixTimeDeserializer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeOfT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonDeserializationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	      &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonParseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isJsonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
			  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unixstamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;		  
		  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObassiDateUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FromUnixTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unixstamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And to setup the serializers i use the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GsonBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObassiDateUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isoFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerTypeAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixTimeSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerTypeAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnixTimeDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The json received from server contains the unix timestamp, however gson deserializes it into the class i select and populates the corresponding date fields.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>KnockoutJS rocks for web development</title>
   <link href="http://hugozap.github.com/software/2012/03/21/KnockoutJs-rocks"/>
   <updated>2012-03-21T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/software/2012/03/21/KnockoutJs-rocks</id>
   <content type="html">
&lt;p&gt;I’m working on my second project using &lt;a href=&quot;www.knockoutjs.com&quot;&gt;KnockoutJS&lt;/a&gt; and it has saved me a lot of time with the benefit of keeping my clientside code organized. I have enjoyed frontend development since i learned javascript and jquery and knockoutjs makes it more fun to build Web applications. The reason is that i can focus on the client logic and forget about dealing with dom elements updates.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-that-knockoutjs-solves&quot;&gt;The problem that knockoutjs solves.&lt;/h2&gt;

&lt;p&gt;I love JavaScript and find JQuery very useful , however i don’t like plumbing code specially when dealing with updating DOM elements from model properties or visceversa.  Even trivial applications can benefit from a databinding mechanism like the one knockoutjs offers.&lt;/p&gt;

&lt;p&gt;( trivial example )
suppose you need to create a web application that captures two fields FIELD1 and FIELD2 using input elements and display the sum of both elements whenever one of them changes.&lt;/p&gt;

&lt;p&gt;Normally you would have the following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a js method called recalculateSum that executes the business logic (adding 2 numbers)&lt;/li&gt;
  &lt;li&gt;Capture the change event of FIELD1 and FIELD2 and recalculate the result&lt;/li&gt;
  &lt;li&gt;Display the result in some DOM Element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jsbin.com/uhojek/4/edit#javascript,html,live&quot;&gt;check the demo (without knockoutjs) here&lt;/a&gt;
The html&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html-php&quot; data-lang=&quot;html+php&quot;&gt;&amp;lt;body&amp;gt;
  Field 1
  &amp;lt;input type=&quot;text&quot; name=&quot;field1&quot; id=&quot;field1&quot;/&amp;gt;
  Field 2
  &amp;lt;input type=&quot;text&quot; name=&quot;field2&quot; id=&quot;field2&quot;/&amp;gt;
  Really complex operation result:
  &amp;lt;span id=&quot;result&quot;/&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The javascript (using only jquery)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//When field1 or field2 changes capture the values&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//recalculate result and update the result element&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#field1,#field2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#field1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#field2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recalculateResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;recalculateResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now let’s see how we can create the example with knockoutjs.
&lt;a href=&quot;http://jsbin.com/ucowot/2/edit&quot;&gt;Check the code using knockoutjs here&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyBindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that with knockout we don’t have to reference the html elements in our javascript code. We also don’t have to update manually the text of the span element that displays the result. This is possible because we created a computed value and let knockoutjs handle the update of the element whenever field1 or field2 change.&lt;/p&gt;

&lt;p&gt;The binding is really easy, we use the attribute data-bind&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;field1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;field1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value:field1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Knockout uses the concept of observables so it can track changes in the values and update the corresponding html element, it also handle the common change events in form elements and update the observable value.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello Jekyll And Github For Blog Hosting</title>
   <link href="http://hugozap.github.com/random/2012/03/14/hello-jekyll-and-GitHub-for-blog-hosting"/>
   <updated>2012-03-14T00:00:00-05:00</updated>
   <id>hhttp://hugozap.github.com/random/2012/03/14/hello-jekyll-and-GitHub-for-blog-hosting</id>
   <content type="html">
&lt;p&gt;I was looking for alternatives to wordpress blogs, because although i like wordpress, i don’t like to waste time upgrading or making backups for my blog, i found the article &lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Blogging like a hacker&lt;/a&gt; and really like the concept of using the console ,a text editor and Git to manage my blog without having to install databases or configure webservers. Github makes this possible.&lt;/p&gt;

&lt;p&gt;Another tool i used was &lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;http://jekyllbootstrap.com&lt;/a&gt; to save some time configuring the site structure&lt;/p&gt;

&lt;h2 id=&quot;whats-this-blog-about&quot;&gt;What’s this blog about&lt;/h2&gt;

&lt;p&gt;I hope to write about entrepreneurship, web and mobile innovation and other cool topics that i like and spend time learning.
Constant motivation is important for me, so i will share links that can help others to find the motivation they need to release cool things.&lt;/p&gt;

&lt;p&gt;English is not my native language so grammar errors are expected,  i hope they are not that bad.&lt;/p&gt;

</content>
 </entry>
 
 
</feed>