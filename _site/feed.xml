<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-12T01:12:28-05:00</updated><id>http://localhost:4000/</id><title type="html">hugozap | Hugo Zapata</title><subtitle>Hugo Zapata personal website.</subtitle><entry><title type="html">Released react-rotary-knob Skin Pack ( 18 Skins )</title><link href="http://localhost:4000/software/2018/03/12/released-reactrotary.html" rel="alternate" type="text/html" title="Released react-rotary-knob Skin Pack ( 18 Skins )" /><published>2018-03-12T00:00:00-05:00</published><updated>2018-03-12T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/03/12/released-reactrotary</id><content type="html" xml:base="http://localhost:4000/software/2018/03/12/released-reactrotary.html">&lt;p&gt;&lt;img src=&quot;/img/react-rotary-knob-skins-preview590x300.jpg&quot; alt=&quot;rotary knob skins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last week I released version 1 of &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob/&quot;&gt;react-rotary-knob&lt;/a&gt;. One of the cool things of the component is the support for custom skins. Yesterday I released a Skin pack with 18 cool skins. The skins are JS modules that can be easily imported and customized (just set the &lt;code class=&quot;highlighter-rouge&quot;&gt;skin&lt;/code&gt; attribute of the Knob to the imported module).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codecanyon.net/item/react-rotary-knob-skin-pack/21567405&quot;&gt;You can get the skin set with setup instructions here&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="react" /><category term="ui" /><category term="uix" /><category term="products" /><summary type="html"></summary></entry><entry><title type="html">Randomize SVG definition id’s</title><link href="http://localhost:4000/software/2018/03/07/randomize-svg-defini.html" rel="alternate" type="text/html" title="Randomize SVG definition id's" /><published>2018-03-07T00:00:00-05:00</published><updated>2018-03-07T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/03/07/randomize-svg-defini</id><content type="html" xml:base="http://localhost:4000/software/2018/03/07/randomize-svg-defini.html">&lt;p&gt;When using inline SVG’s a duplicated definition element id’s will cause problems as the browser will use the first SVG definition with the id.&lt;/p&gt;

&lt;p&gt;I created a tool to randomize id’s, you can find it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hugozap.com/randomize_svg_def_ids.html&quot;&gt;http://hugozap.com/randomize_svg_def_ids.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If for some reason the link is broken, &lt;a href=&quot;https://gist.github.com/hugozap/a0b96b14d25bad83cbe73b0d21d182d9&quot;&gt;here’s the gist&lt;/a&gt; (it’s a single html file)&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="software" /><category term="svg" /><category term="tools" /><summary type="html">When using inline SVG’s a duplicated definition element id’s will cause problems as the browser will use the first SVG definition with the id.</summary></entry><entry><title type="html">A rotary knob for React</title><link href="http://localhost:4000/software/2018/03/03/a-rotary-knob-for-re.html" rel="alternate" type="text/html" title="A rotary knob for React" /><published>2018-03-03T00:00:00-05:00</published><updated>2018-03-03T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/03/03/a-rotary-knob-for-re</id><content type="html" xml:base="http://localhost:4000/software/2018/03/03/a-rotary-knob-for-re.html">&lt;p&gt;A few days ago, I published &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob&quot;&gt;react-rotary-knob&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/knobdemo.png&quot; alt=&quot;knob&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though is a component with a simple API, there were multiple challenging aspects of building it, some of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the knob is small, how to handle the touch interactions? ( it has to feel natural).&lt;/li&gt;
  &lt;li&gt;Be precise.&lt;/li&gt;
  &lt;li&gt;Support for mobile.&lt;/li&gt;
  &lt;li&gt;Support for keyboard events.&lt;/li&gt;
  &lt;li&gt;Play well with other form components (focus).&lt;/li&gt;
  &lt;li&gt;Support custom skins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;custom-skins&quot;&gt;Custom skins&lt;/h3&gt;

&lt;p&gt;The Knob can be skinned using SVG (see the default skin). As long as the SVG file has an element with id “knob” and its centered it will work. For a reference check the &lt;a href=&quot;https://github.com/hugozap/react-rotary-knob/blob/master/src/knobdefaultskin.js&quot;&gt;default skin&lt;/a&gt;. I’m currently working on a custom skin pack.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/hugozap/react-samy-svg&quot;&gt;react-samy-svg&lt;/a&gt; is possible to build components based on SVG files without hardcoding the SVG.&lt;/p&gt;

&lt;h3 id=&quot;precision-mode&quot;&gt;Precision mode&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/79100d18d391d22dd35c7ac7f956cc93cab72eee/687474703a2f2f6875676f7a61702e6769746875622e696f2f72656163742d726f746172792d6b6e6f622f696d672f6b6e6f622d6261736963322e676966&quot; alt=&quot;Precision mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By adding a minimum lock distance we avoid the sudden ‘jumps’ when dragging the Knob, this works well with the non limited dragging. If more precision is needed then a larger drag distance can be used.&lt;/p&gt;

&lt;h3 id=&quot;demos&quot;&gt;Demos&lt;/h3&gt;

&lt;p&gt;Try it yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://audio-thing2.surge.sh/&quot;&gt;Controlling Oscillator parameters (WebAudio)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hugozap.github.io/react-rotary-knob/storybook&quot;&gt;Component storybook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="software" /><category term="react" /><category term="components" /><category term="ui" /><category term="ux" /><summary type="html">A few days ago, I published react-rotary-knob.</summary></entry><entry><title type="html">Voronoi Butterfly</title><link href="http://localhost:4000/software/2018/01/09/voronoi-butterfly.html" rel="alternate" type="text/html" title="Voronoi Butterfly" /><published>2018-01-09T00:00:00-05:00</published><updated>2018-01-09T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/01/09/voronoi-butterfly</id><content type="html" xml:base="http://localhost:4000/software/2018/01/09/voronoi-butterfly.html">&lt;iframe style=&quot;border:solid 1px rgb(30,30,30)&quot; src=&quot;/demos/voronoi_butterfly.html&quot; width=&quot;100%&quot; height=&quot;500px&quot;&gt;...&lt;/iframe&gt;

&lt;p&gt;Voronoi diagrams are used in a broad range of applications. d3.js provides the d3.voronoi utility to generate the list of polygons based on a list of points on a plane.&lt;/p&gt;

&lt;p&gt;Another popular use of voronoi diagrams is graphics and art.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bl.ocks.org/hugozap/a9a603d79070209411d9bbf7e616e7d0&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on &lt;a href=&quot;https://bl.ocks.org/mbostock/4060366&quot;&gt;this demo&lt;/a&gt; by d3 creator,  Mike Bostock.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="graphics" /><category term="d3" /><category term="art" /><summary type="html">...</summary></entry><entry><title type="html">Slides of my talk SVG and React ( ReactJS Tokyo December 2017 )</title><link href="http://localhost:4000/software/2018/01/03/slides-of-my-talk-sv.html" rel="alternate" type="text/html" title="Slides of my talk SVG and React ( ReactJS Tokyo December 2017 )" /><published>2018-01-03T00:00:00-05:00</published><updated>2018-01-03T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/01/03/slides-of-my-talk-sv</id><content type="html" xml:base="http://localhost:4000/software/2018/01/03/slides-of-my-talk-sv.html">&lt;p&gt;A few weeks ago I gave a talk in the ReactJS Tokyo meetup. When I arrived to Japan a few months ago one of my goals was to contribute in some way to the local JavaScript community, so I searched for conferences and meetups and found ReactJS Tokyo. After contacting the organizers and meeting with one of them, things were arranged and I was one of the speakers.&lt;/p&gt;

&lt;p&gt;The topic I chose was SVG and React. There’s different approaches to loading and manipulating SVG within React, so my goal was to present a series of tools and techniques to use depending on the use case. I’ve been working a lot with SVG and React and to solve some of the challenges presented, I maintain a tool called react-samy-svg that makes it easy to load and manipulate external SVG files. &lt;a href=&quot;https://github.com/hugozap/react-samy-svg&quot;&gt;Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the presentations ended, I had the opportunity to meet some cool people. The feedback I received was positive.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://slides.com/hugozapata/deck&quot;&gt;Check the slides here&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="software" /><category term="react" /><category term="frontend" /><category term="svg" /><summary type="html">A few weeks ago I gave a talk in the ReactJS Tokyo meetup. When I arrived to Japan a few months ago one of my goals was to contribute in some way to the local JavaScript community, so I searched for conferences and meetups and found ReactJS Tokyo. After contacting the organizers and meeting with one of them, things were arranged and I was one of the speakers.</summary></entry><entry><title type="html">Simulations are fun!</title><link href="http://localhost:4000/software/2018/01/03/simulations-are-fun.html" rel="alternate" type="text/html" title="Simulations are fun!" /><published>2018-01-03T00:00:00-05:00</published><updated>2018-01-03T00:00:00-05:00</updated><id>http://localhost:4000/software/2018/01/03/simulations-are-fun</id><content type="html" xml:base="http://localhost:4000/software/2018/01/03/simulations-are-fun.html">&lt;p&gt;Inspired by Tokyo, I’ve been experimenting with different techniques to simulate a city and its people. There’s been a lot of challenges and it has 
been a great excercise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tokyosim000001.surge.sh/&quot;&gt;View v000000.1 - B&amp;amp;W &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://tokyosim-v00000002.surge.sh/&quot;&gt;View v000000.2 - Some colors, people using portals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-a-type-system-for-javascript&quot;&gt;Using a type system for JavaScript&lt;/h2&gt;

&lt;p&gt;For the first prototype version I used plain JavaScript. I reached a point where not having types was causing some pain. Especially as each world entity has properties that I had to remember. Different entities shared some properties. For example Person and Floor have both positions (x,y) , Floor and Train have both an array of Persons.&lt;/p&gt;

&lt;p&gt;As things were getting more complex adding a type system was needed. I didn’t want to spend a lot of time on setup so I went with Flow. After a few hours refactoring the code, the cognitive load was lower again and I could keep focusing on the next challenge.&lt;/p&gt;

&lt;h2 id=&quot;svg-vs-canvas-vs-webgl-renderer&quot;&gt;SVG vs canvas vs webgl renderer&lt;/h2&gt;

&lt;p&gt;I started using SVG and d3.js, this combination is usually used to create charts. I modeled the city as a list of data entites and d3 has a lot of utilities to make it easier to create visualizations with it. The problem with SVG for this use cases is that one has to store the SVG internal nodes to update only those (re creating the SVG would be very expensive). First prototype version woks ok , but I knew that it was time to switch to a more clean approach. Currently I’m working on the canvas renderer (using p5.js)&lt;/p&gt;

&lt;h2 id=&quot;portals&quot;&gt;Portals&lt;/h2&gt;

&lt;p&gt;One of the interesting challenges I had to solve was moving one person from one place to another. I have a list of Places and when the entity gets closer to a certain point, it needs to be transfered to other place ( For example, from one building floor to another, or from the building 1st floor to the street)&lt;/p&gt;

&lt;p&gt;The solution to this, was to introduce the concept of “Portals”. Each portal connects 2 places at specific points (x, y). I created an interface IPortal with all the portal properties. So far I have 2 types of portals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Escalators (from floor to floor )&lt;/li&gt;
  &lt;li&gt;Building entrance ( from floor to street )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;end-goal&quot;&gt;End goal&lt;/h2&gt;

&lt;p&gt;I’m working on the rule engine and new renderer now. It started as a personal excercise but I see how it can be used to create some fun 2d things with it.
Watching the world entities go from one place to another is fun and designing/debugging has been a great brain workout so I plan to keep adding some features and release derivative products, maybe just small demos/games.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="d3" /><category term="svg" /><category term="graphics" /><summary type="html">Inspired by Tokyo, I’ve been experimenting with different techniques to simulate a city and its people. There’s been a lot of challenges and it has been a great excercise.</summary></entry><entry><title type="html">Rethinking Accessibility</title><link href="http://localhost:4000/software/2017/08/10/rethinking-accessibi.html" rel="alternate" type="text/html" title="Rethinking Accessibility" /><published>2017-08-10T00:00:00-05:00</published><updated>2017-08-10T00:00:00-05:00</updated><id>http://localhost:4000/software/2017/08/10/rethinking-accessibi</id><content type="html" xml:base="http://localhost:4000/software/2017/08/10/rethinking-accessibi.html">&lt;p&gt;[Work in Progress]&lt;/p&gt;

&lt;p&gt;Most of the accessibility resources out there focus on just one type of accessibility. That is, making a Web site easier to use to people with vision problems. From using contrasting colors, to adding special attributes for screen readers. The site structure is the same, but the goal is to make it less hard to use.&lt;/p&gt;

&lt;p&gt;This is a very limited view of what the Web could be in terms of accessibility.&lt;/p&gt;

&lt;h2 id=&quot;issues-with-current-web-accessibility-guidelines-and-checklists&quot;&gt;Issues with current Web accessibility guidelines and checklists.&lt;/h2&gt;

&lt;p&gt;Because the current accessibility principles are somewhat standard, there are lists that can be used to check against this principles. However, a developer can follow the guidelines and still create a Website that users cannot use. Its better than nothing but still far from ideal.&lt;/p&gt;

&lt;p&gt;I’ve been working on programming workshops for deaf students. A big challenge for them is the text oriented nature of most programming resources, and the lack of videos with sign languange interpretation. I was not aware that for most of them, written language is not natural, and they usually get confused with long paragraphs. Having subtitles for videos is also problematic, because again, that’s not how they communicate and its common for them to get lost.  ( Visual, concise explanations work well here )&lt;/p&gt;

&lt;p&gt;So even if a Website passess all the accessibility checks but is heavy on text, with few visuals and the video content was thought only for people who can hear, it would not be accessible for that group.&lt;/p&gt;

&lt;h2 id=&quot;rethinking-accessibility-for-web-applications&quot;&gt;Rethinking Accessibility for Web Applications.&lt;/h2&gt;

&lt;p&gt;Instead of thinking of accessibility as something that’s added to the existing web application, it has to be included from the conceptual stages of the project. For a platform to be inclusive some assumptions must be re evaluated.&lt;/p&gt;

&lt;h3 id=&quot;same-goal-multiple-experiences&quot;&gt;Same goal, Multiple experiences&lt;/h3&gt;

&lt;p&gt;Instead of starting with a single User Experience and later trying to force it into being accesible, a platform can deliver a totally different experience based on the user preferences.&lt;/p&gt;

&lt;h3 id=&quot;user-intents&quot;&gt;User intents&lt;/h3&gt;

&lt;p&gt;Most Web applications can be defined by user intents: The user end goals&lt;/p&gt;

&lt;p&gt;Some example user intents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get traffic data&lt;/li&gt;
  &lt;li&gt;reserve a parking spot&lt;/li&gt;
  &lt;li&gt;search and retrieve articles related to a topic of interest&lt;/li&gt;
  &lt;li&gt;register for a local event&lt;/li&gt;
  &lt;li&gt;communicate with another user&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;accessible-intents&quot;&gt;Accessible intents.&lt;/h3&gt;

&lt;p&gt;An accessible application has multiple experiences. Each experience implements the list of intents in a different way. For example&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Traditional Web experience : How most web sites are planned and implemented. Base HTML layout grouped by hierarchy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Audio based experience:  A voice based experience can be implemented, with voice commands as main input. Tap, double tap and other swipe gestures can be used as navigation aids too. Voice settings would ideally be set based on user preferences (pitch, speed, etc).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Visual experience for people with mobility problems: For people with reduced mobility a custom navitation system using eye tracking or wizard base navigation with yes/no could work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications would offer a way to query what experiences are supported, ways to switch between them.&lt;/p&gt;

&lt;p&gt;A user could switch to “audio based experience” and keep interacting with the web application using voice commands.&lt;/p&gt;

&lt;h3 id=&quot;the-role-of-user-agents&quot;&gt;The role of user agents&lt;/h3&gt;

&lt;p&gt;If we want the Web to be truly accessible, then the browsers must evolve to make it easy to “switch experiences” based on user previously set preferences.&lt;/p&gt;

&lt;p&gt;Right now every time a user visits a web site, the browser sends some data,things like browser version, operative system etc. The application server can use this to make some decisions on the data that would be returned to the client. However, there’s now way for a user to set her preferred experience. Ideally the browser would send a list of experiences so the particular experience can be delivered.&lt;/p&gt;

&lt;h3 id=&quot;the-dom-is-just-an-implementation-detail&quot;&gt;The DOM is just an implementation detail&lt;/h3&gt;

&lt;p&gt;The web distribution model is the main advantage of the platform. The DOM is just an implementation detail that we may replace with something else. For some web sites, having a WebGL based experience will be a good idea. A user with reduced mobility can use a vibrating device with a button as the controller and a custom experience  that narrates and understands that kind of input.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Accessibility is much more than optimizing for screen readers.  A web application can be thought as a series of user intents that can be delivered in a different way (experience). Ideally a Web application would offer ways to query supported experiences. Cooperation with the user agent would allow automatic selection of the best experience based on user preferences.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="web" /><category term="accessibility" /><summary type="html">[Work in Progress] Most of the accessibility resources out there focus on just one type of accessibility. That is, making a Web site easier to use to people with vision problems. From using contrasting colors, to adding special attributes for screen readers. The site structure is the same, but the goal is to make it less hard to use.</summary></entry><entry><title type="html">Thoughts on MobX for large projects</title><link href="http://localhost:4000/software/2017/07/19/thoughts-on-mobx-for.html" rel="alternate" type="text/html" title="Thoughts on MobX for large projects" /><published>2017-07-19T00:00:00-05:00</published><updated>2017-07-19T00:00:00-05:00</updated><id>http://localhost:4000/software/2017/07/19/thoughts-on-mobx-for</id><content type="html" xml:base="http://localhost:4000/software/2017/07/19/thoughts-on-mobx-for.html">&lt;p&gt;[WIP]&lt;/p&gt;

&lt;h1 id=&quot;some-things-i-learned-about-mobx&quot;&gt;Some Things I Learned about MobX&lt;/h1&gt;

&lt;p&gt;I’ve been working with MobX for a while and these are some
of the lessons I’ve learned. Some of them are personal
preferences. I feel there’s still a lot of exploration to do before
standard patterns emerge that answer the question of how to structure the application state with mobx.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; There are some libraries out there that help to structure the stores. In this post I’m interested in exploring solutions with plain mobx before introducing more concepts and dependencies.&lt;/p&gt;

&lt;h2 id=&quot;split-ui-and-application-state&quot;&gt;Split UI and Application State?&lt;/h2&gt;

&lt;p&gt;When learning mobx I found a recommendation somewhere on
having a store for UI related stuff and another for 
application model stuff. This sounds good in theory, 
however as both UI and App stores started growing some issues appeared:&lt;/p&gt;

&lt;p&gt;Properties in the UI state may belong to different logical groups, so
having them in the same artifact (The UIState mobx store) didn’t feel good,
when working on a feature, I’m not interested in UI state properties that belong to another feature and scanning
the file looking for them was annoying.&lt;/p&gt;

&lt;p&gt;Based on the previous reflection, I realized that the distinction of UI state vs App State was not being helpful for the project. A mobx store is an application artifact and everything there has to do with the UI, so instead of having a separated store for UI things, we now have 1 store per logical unit. In our case we chose subsystems like authentication,search,admin etc, but I guess this depends on the nature of the project.&lt;/p&gt;

&lt;h2 id=&quot;domain-logic-on-mobx-stores&quot;&gt;Domain logic on mobx Stores&lt;/h2&gt;

&lt;p&gt;With computed fields, some logic can be included in the mobx stores. It’s easy to start adding domain logic there, however I don’t think this is a good idea. Mobx stores are just an mechanism to update the view in a smart way, but they are a technical artifact. Domain model rules should not have anything to do with mobx terminology.&lt;/p&gt;

&lt;p&gt;A better approach is to have the business rules in another module that nows nothing about mobx. From the mobx store, it’s easy to have a computed field that delegates the calculation to the domain logic module(s).&lt;/p&gt;

&lt;p&gt;Testing the domain rules is easier if they are separated from the mobx terminology.&lt;/p&gt;

&lt;h2 id=&quot;how-to-structure-a-store&quot;&gt;How to structure a store?&lt;/h2&gt;

&lt;p&gt;For complex UI’s the stores can get pretty messy and navigating them can be tricky. A mix of properties, computed fields and actions can turn into spaguetti. A practical solution to this problems include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If using a single file per store, group properties, actions and computed fields (Some people may prefer to group them by logical concerns)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Move actions to a separated file: With this approach, the mobx store gets splitted into multiple files&lt;/p&gt;

    &lt;p&gt;An example stores structure:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;search(Search Store folder)
        &lt;ul&gt;
          &lt;li&gt;store.js (properties are declared there, actions are imported here)&lt;/li&gt;
          &lt;li&gt;actions.js (extract the actions into a separate file)&lt;/li&gt;
          &lt;li&gt;computed.js (Worthy if there’s a lot of computed fields)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;users (Users Store folder)
        &lt;ul&gt;
          &lt;li&gt;store.js&lt;/li&gt;
          &lt;li&gt;actions.js&lt;/li&gt;
          &lt;li&gt;computed.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Structuring stores this way has the benefit of making it easy to locate things. When working in a feature
we can jump quickly to the related properties or actions of the feature/subsystem we are working on ignoring
everything else.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Everything in the mobx store is related to the UI so group by logical units (subsystems, entities, use cases) instead of UI vs App State.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Place domain logic in plain JS modules (that now nothing of MobX terminology) and import them from your stores&lt;/li&gt;
  &lt;li&gt;Experiment with different Store layouts. Optimize for maintenability.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="software" /><category term="mobx" /><category term="react" /><category term="frontend" /><summary type="html">[WIP]</summary></entry><entry><title type="html">Accessible Presentations</title><link href="http://localhost:4000/software/2017/06/27/accessible-workshops.html" rel="alternate" type="text/html" title="Accessible Presentations" /><published>2017-06-27T00:00:00-05:00</published><updated>2017-06-27T00:00:00-05:00</updated><id>http://localhost:4000/software/2017/06/27/accessible-workshops</id><content type="html" xml:base="http://localhost:4000/software/2017/06/27/accessible-workshops.html">&lt;p&gt;Last month I conducted a workshop for programming students with limited hearing. I have given a lot of talks but felt  anxious about this one. I  wanted them to learn and be inspired by the workshop, so I prepared a lot starting 3 weeks before.&lt;/p&gt;

&lt;p&gt;I knew beforehand that their experience would range from total beginners with no programming experience to moderate experience in C# and Java. Most of them were new to the web platform.&lt;/p&gt;

&lt;p&gt;Some of the things I learned while preparing and giving the workshop:&lt;/p&gt;

&lt;h2 id=&quot;less-text-more-visuals&quot;&gt;Less text, more visuals&lt;/h2&gt;

&lt;p&gt;I was lucky to have the advice of a teacher who works with deaf students, her first recommendation was: “Do not add long paragraphs. They won’t follow”.&lt;/p&gt;

&lt;p&gt;It turns out that deaf people process words different and the way we write is not natural to them. Later she told me that most students struggle with long text explanations.&lt;/p&gt;

&lt;p&gt;With that in mind I replaced text explanations with diagrams or just removed them.&lt;/p&gt;

&lt;h2 id=&quot;small-steps&quot;&gt;Small steps&lt;/h2&gt;

&lt;p&gt;When the range of experience is diverse, it’s possible that some people need more time to complete a task and if the current one is prerequisite for the next they would be left behind and would quickly lost motivation.&lt;/p&gt;

&lt;p&gt;My strategy to avoid this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use CodePen (so no time wasted on setup)&lt;/li&gt;
  &lt;li&gt;Have a base pen &lt;a href=&quot;https://codepen.io/hugozap/pen/wdQMgM?editors=1010&quot;&gt;https://codepen.io/hugozap/pen/wdQMgM?editors=1010&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Start with basic, simple tasks and slowly increase difficulty.&lt;/li&gt;
  &lt;li&gt;For every step, have the solution on a Pen so if anyone is left behind, that person could start the next challenge from a good starting point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I enjoyed the experience and days later the University contacted me because they asked for more workshops. That made me happy. Some students kept practicing and sharing their learning process with me and that’s always encouraging.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="accessibility" /><category term="talks" /><summary type="html">Last month I conducted a workshop for programming students with limited hearing. I have given a lot of talks but felt anxious about this one. I wanted them to learn and be inspired by the workshop, so I prepared a lot starting 3 weeks before.</summary></entry><entry><title type="html">Muestra básica de JavaScript (Para talleres introductorios)</title><link href="http://localhost:4000/software/2017/05/18/muestra-bsica-de-jav.html" rel="alternate" type="text/html" title="Muestra básica de JavaScript (Para talleres introductorios)" /><published>2017-05-18T00:00:00-05:00</published><updated>2017-05-18T00:00:00-05:00</updated><id>http://localhost:4000/software/2017/05/18/muestra-bsica-de-jav</id><content type="html" xml:base="http://localhost:4000/software/2017/05/18/muestra-bsica-de-jav.html">&lt;p&gt;&lt;a href=&quot;http://hugozap.com/guia-principiantes-js/&quot;&gt;http://hugozap.com/guia-principiantes-js/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En este repositorio se encuentra una muestra de algunas instrucciones
 y sintaxis de JavaScript.  La utilizamos en un taller reciente, pero
 puede ser de ayuda a quien quiera dar una introducción al lenguaje.&lt;/p&gt;</content><author><name></name></author><category term="software" /><category term="JavaScript" /><category term="español" /><summary type="html">http://hugozap.com/guia-principiantes-js/ En este repositorio se encuentra una muestra de algunas instrucciones y sintaxis de JavaScript. La utilizamos en un taller reciente, pero puede ser de ayuda a quien quiera dar una introducción al lenguaje.</summary></entry></feed>